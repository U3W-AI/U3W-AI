{"version":3,"sources":["uni-app:///main.js","webpack:///D:/AAAi/U3W-AI-main/cube-mini/pages/work/index.vue?795d","webpack:///D:/AAAi/U3W-AI-main/cube-mini/pages/work/index.vue?2016","webpack:///D:/AAAi/U3W-AI-main/cube-mini/pages/work/index.vue?2506","webpack:///D:/AAAi/U3W-AI-main/cube-mini/pages/work/index.vue?0b81","uni-app:///pages/work/index.vue","webpack:///D:/AAAi/U3W-AI-main/cube-mini/pages/work/index.vue?72cd","webpack:///D:/AAAi/U3W-AI-main/cube-mini/pages/work/index.vue?fd9a"],"names":["wx","__webpack_require_UNI_MP_PLUGIN__","__webpack_require__","createPage","Page","name","data","statusBarHeight","userId","corpId","chatId","expandedHistoryItems","userInfoReq","userPrompt","taskId","roles","toneChatId","ybDsChatId","dbChatId","tyChatId","baiduChatId","zhzdChatId","isNewChat","jsonRpcReqest","jsonrpc","id","method","params","sectionExpanded","aiConfig","promptInput","taskStatus","aiList","avatar","capabilities","label","value","selectedCapabilities","enabled","status","progressLogs","isExpanded","isSingleSelect","selectedModel","models","selectedCapability","taskStarted","enabledAIs","screenshots","autoPlay","results","activeResultIndex","chatHistory","selectedResults","scorePrompt","scoreAI","scorePromptList","selectedScorePrompt","collectNum","layoutPrompt","layoutAI","selectedMedia","tthArticleEditVisible","tthArticleTitle","tthArticleContent","tthFlowVisible","tthFlowLogs","tthFlowImages","tthScoreContent","mediaList","socketTask","reconnectTimer","heartbeatTimer","reconnectCount","maxReconnectCount","isConnecting","isRefreshing","scrollIntoView","historyDrawerVisible","scoreModalVisible","layoutModalVisible","currentLayoutResult","aiLoginStatus","yuanbao","doubao","deepseek","tongyi","metaso","zhzd","baidu","accounts","isLoading","computed","canSend","canScore","console","currentResult","groupedHistory","chatGroups","Object","chatGroup","groups","parentItem","isParent","children","child","tthArticleContentLength","isTthArticleContentExceeded","watch","handler","textarea","immediate","onLoad","windowInfo","uni","title","content","showCancel","confirmText","success","url","onShow","onUnload","methods","getMediaLabelFromResult","handleTextareaFocus","bubbles","initUserInfo","initEnabledAIs","ensureLatestCorpId","result","handleCorpIdUpdated","icon","generateUUID","toggleSection","toggleAI","ai","getModelIndex","getSelectedModelLabel","onModelChange","duration","toggleCapability","selectSingleCapability","sendPrompt","initWebSocket","fail","handleReconnect","startHeartbeat","type","timestamp","stopHeartbeat","clearInterval","sendWebSocketMessage","message","closeWebSocket","clearTimeout","code","reason","handleWebSocketMessage","targetAI","isCompleted","wkpfAI","aiName","shareUrl","shareImgUrl","znpbAI","mediaAI","tthZnpbAI","handleAiStatusMessage","handleAIResult","getStatusText","getStatusIconClass","getStatusEmoji","toggleTaskExpansion","toggleAutoPlay","previewImage","current","urls","switchResultTab","renderMarkdown","isImageFile","isPdfFile","copyResult","exportResult","openShareUrl","copyPdfUrl","openPdfFile","filePath","showHistoryDrawer","closeHistoryDrawer","loadChatHistory","res","loadHistoryItem","loadLastChat","lastChat","saveHistory","historyData","metasoChatId","getHistoryDate","date","year","month","day","hour","minute","second","parseInt","yesterday","formatHistoryTime","toggleHistoryExpansion","showScoreModal","require","getAllScorePrompt","response","closeScoreModal","getScorePromptIndex","onScorePromptChange","showLayoutModal","selectLayoutAI","selectMedia","closeLayoutModal","handleLayout","createZhihuLayoutTask","layoutRequest","createBaijiahaoDeliveryTask","createToutiaoLayoutTask","createWechatLayoutTask","addOrUpdateTaskAI","handleDirectPushToWechat","mediaLabel","mediaItem","mediaName","contentText","num","mediaRequest","mediaDeliveryAI","handlePushToWechat","toggleResultSelection","handleScore","getScoreWord","scoreSuffix","selectedContents","filter","map","join","fullPrompt","scoreRequest","selectedAI","selectScoreAI","createNewChat","checkAiLoginStatus","setTimeout","sendAiStatusCheck","getPlatformIcon","agent","getPlatformName","refreshAiStatus","storage","isAiLoginEnabled","isAiInLoading","disableAIsByLoginStatus","updateAiEnabledStatus","showTthArticleEditModal","closeTthArticleEditModal","confirmTTHPublish","closeTthFlowDialog","htmlToText","formatTime"],"mappings":";;;;;;;;;;;;;AAAA;AAE2D;AAC3D;AACA;AAHA;AACAA,EAAE,CAACC,iCAAiC,GAAGC,mBAAmB;AAG1DC,UAAU,CAACC,cAAI,CAAC,C;;;;;;;;;;;;;ACLhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8H;AAC9H;AACyD;AACL;AACqC;;;AAGzF;AACoM;AACpM,gBAAgB,uMAAU;AAC1B,EAAE,2EAAM;AACR,EAAE,4FAAM;AACR,EAAE,qGAAe;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE,gGAAU;AACZ;AACA;;AAEA;AACe,gF;;;;;;;;;;;;ACvBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjMA;AAAA;AAAA;AAAA;AAAuwB,CAAgB,ivBAAG,EAAC,C;;;;;;;;;;;;;;;;;;;;;;;;ACge3xB;AAGA;AAGA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA,eAEA;EACAC;EACAC;IACA;MACA;MACAC;MAEA;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAL;QACAC;QACAK;QACAC;QACAC;QACAC;QACAC;QACAC;QAEAC;QACAC;QACAC;MACA;MACAC;QACAC;QACAC;QACAC;QACAC;MACA;MAEA;MACAC;QACAC;QACAC;QACAC;MACA;MAEA;MACAC;QACA3B;QACA4B;QACAC;UACAC;UACAC;QACA,GACA;UACAD;UACAC;QACA,EACA;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACArC;QACA4B;QACAC;UACAC;UACAC;QACA;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACArC;QACA4B;QACAC;UACAC;UACAC;QACA,GACA;UACAD;UACAC;QACA,EACA;QACAC;QACAM;QAAA;QACAC,SACA;UAAAT;UAAAC;QAAA,GACA;UAAAD;UAAAC;QAAA,EACA;QACAE;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACArC;QACA4B;QACAC,eACA;UACAC;UACAC;QACA,GACA;UACAD;UACAC;QACA,EACA;QACAS;QACAP;QACAC;QACAC;QACAC;MACA,GAGA;QACApC;QACA4B;QACAC,eACA;UAAAC;UAAAC;QAAA,GACA;UAAAD;UAAAC;QAAA,GACA;UAAAD;UAAAC;QAAA,EACA;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA,GAEA;QACArC;QACA4B;QACAC,eACA;UACAC;UACAC;QACA,GACA;UACAD;UACAC;QACA,GACA;UACAD;UACAC;QACA,EACA;QACAS;QAAA;QACAP;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACArC;QACA4B;QACAC,eACA;UAAAC;UAAAC;QAAA,EACA;QACAC;QACAC;QACAC;QACAC;QACAC;MACA,EAIA;MAEA;MACAX;MACAgB;MACAC;MAEA;MACAC;MACAC;MAEA;MACAC;MACAC;MAEA;MACAC;MAEA;MACAC;MACAC;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;;MAEA;MACAC;MAEA;MACAC;MACAC;MAAA;MACAC;MAAA;;MAEA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;;MAEA;MACAC,YACA;QACAhE;QACA8B;MACA,GACA;QACA9B;QACA8B;MACA,GACA;QACA9B;QACA8B;MACA,GACA;QACA9B;QACA8B;MACA,EACA;MAEA;MACAmC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MAAA;MACAC;MAEA;MACAC;MACAC;MACAC;MACAC;MAAA;;MAEA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACAP;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAE;QACAR;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EAEAG;IACAC;MAAA;MACA;MACA;;MAEA;MACA;QAAA;MAAA;;MAEA;MACA;MAEA;IACA;IAEAC;MACA;MACA;MACAC;MACAA;MACAA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MAAA;MACA;MACA;;MAEA;MACA;QACA;UACAC;QACA;QACAA;MACA;;MAEA;MACAC;QACA;QACAC;UAAA;QAAA;;QAEA;QACA;QACA;QAEA;UACAC;QACA;;QAEA;QACAA,kDACAC;UACAC;UACA9D;UACA+D;YAAA,uCACAC;cACAF;YAAA;UAAA,CACA;QAAA,GACA;MACA;MAEA;IACA;IAEA;IACAG;MACA;IACA;IAEA;IACAC;MACA;IACA;EACA;EACAC;IACA;IACA5C;MACA6C;QAAA;QACA;QACA;UACA;UACA;YACAC;UACA;QACA;MACA;MACAC;IACA;EACA;EACAC;IAAA;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cACA;cAEAC;cACA;cAAA;cAAA,OAQA;YAAA;cAEA;cACAC;;cAEA;cAAA,MACA;gBAAA;gBAAA;cAAA;cACAnB;cACAmB;gBACAC;gBACAC;gBACAC;gBACAC;gBACAC;kBACAL;oBACAM;kBACA;gBACA;cACA;cAAA;YAAA;cAIA;cACA;cACA;cACA;cACA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EACA;EAEAC;IACA;IACA;EACA;EAEAC;IACA;IACAR;IACA;EACA;EAEAS;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;IAEA;IACAC;MAAA;MACA;MACA;QACA;QACA;UACAf;UACA;UACAA;YAAAgB;UAAA;QACA;MACA;IACA;IAEA;IACAC;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;gBACA;gBACA;gBACA;gBAAA;gBAAA;gBAAA,OAEA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAhC;gBACA;cAAA;gBAGA;;gBAEA;gBACA;gBACA;gBAEAA;kBACAvF;kBACAC;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IACA;IAEA;IACAuH;MACA;MACA;QAAA;MAAA;MACAjC;QAAA;MAAA;IACA;IAEA;IACAkC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAEA;cAAA;gBAAAC;gBACA;kBACAnC;kBACA;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACAoC;MACA;MACA;QACApC;QACA;QACA;QACAmB;UACAC;UACAiB;QACA;MACA;IACA;IAEA;IACAC;MACA;IACA;IAEA;IACAC;MACA;IACA;IAEA;IACAC;MACA;MACA;QACArB;UACAC;UACAC;UACAC;UACAC;QACA;QACA;MACA;MACAkB;IACA;IAEA;IACAC;MACA;MACA;QAAA;MAAA;IACA;IAEAC;MACA;MACA;QAAA;MAAA;MACA;IACA;IAEAC;MACA;MACA;MACA;QACAH;QACAtB;UACAC;UACAiB;UACAQ;QACA;MACA;IACA;IAEA;IACAC;MACA;MACA;QACA3B;UACAC;UACAC;UACAC;UACAC;QACA;QACA;MACA;MAEA;;MAEA;MACA;QACA;QACAkB;MACA;MACA;MAAA,KACA;QACA;QACA;UACAA;QACA;UACAA;QACA;MACA;IACA;IACA;IACAM;MACA;MAEA;QACAN;MACA;QACAA;MACA;IACA;IAEA;IACAO;MAAA;MACAhD;MACAA;MAEA;QACAA;QACA;MACA;MAEAA;MACAA;MACAA;MAEA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACAA;MAEA;MACA;MACA;MACA;MACA;MACAA;;MAEA;MACA;QAAA;MAAA;MACAA;MACAA;QAAA;MAAA;;MAEA;MACA;QACAyC;QACAzC;MACA;;MAEA;MACA;QACA;UACA;YACA;YACA;YACA;cACA;YACA;YACA;cACA;YACA;UACA;YACA;YACA;YACA;cACA;YACA;YACA;cACA;YACA;UACA;QACA;QACA;UACA;UACA;YACA;UACA;UACA;YACA;UACA;QACA;QACA;UACA;UACA;YACA;UACA;QACA;QACA;UACA;UACA;YACA;UACA;UACA;YACA;UACA;UACA;YACA;UACA;QACA;QAEA;UACA;UACA;YACA;UACA;YACA;UACA;QACA;QACA;UACA;YACA;YACA;cACA;YACA;UACA;QACA;QACA;UACA;YACA;YACA;YACA;cACA;YACA;cACA;YACA;cACA;YACA;cACA;cACA;YACA;UACA;QACA;MAGA;MAEAA;MACAA;;MAEA;MACA;;MAEA;MACA;MACA;MACA;MAEAA;MACAA;MAEA;MACA;MAEAA;MACAA;MAEAmB;QACAC;QACAiB;MACA;IACA;IAEA;IACAY;MAAA;MACA;MACA;QACAjD;QACAmB;UACAC;UACAC;UACAC;UACAC;UACAC;YACAL;cACAM;YACA;UACA;QACA;QACA;MACA;MAEA;QACAzB;QACA;MACA;;MAEA;MACA;MAEA;;MAEA;MACA;MACA;MACAA;MAEA;QACAyB;QACAD;UACAxB;QACA;QACAkD;UACAlD;UACA;UACA;QACA;MACA;MAEA;QACAA;QACA;QACA;;QAEAmB;UACAC;UACAiB;UACAQ;QACA;;QAEA;QACA;MACA;MAEA;QACA;MACA;MAEA;QACA7C;QACA;QACAmB;UACAC;UACAiB;QACA;QACA;MACA;MAEA;QACArC;QACA;QACA;;QAEAmB;UACAC;UACAiB;QACA;;QAEA;QACA;MACA;IACA;IAEA;IACAc;MAAA;MACA;QACAnD;QACAmB;UACAC;UACAC;UACAC;UACAC;QACA;QACA;MACA;;MAEA;MACA;QACAvB;QACA;MACA;MAEA;MACA;;MAEAA;MAEA;QACAA;QACA;MACA;IACA;IAEA;IACAoD;MAAA;MACA;;MAEA;QACA;UACA;YACAC;YACAC;UACA;QACA;MACA;IACA;IAEA;IACAC;MACA;QACAC;QACA;MACA;IACA;IAEAC;MACA;QACAzD;QACA;UACAzF;QACA;MACA;QACAyF;MACA;IACA;IAEA;IACA0D;MACA1D;MACAA;MAEA;QACAA;QACAA;QAEA;UACAA;UACAmB;YACAC;YACAiB;YACAQ;UACA;QACA;UACA7C;QACA;MACA;QACAA;MACA;IACA;IAEA2D;MACA;MACA;QACAC;QACA;MACA;;MAEA;MACA;;MAEA;MACA;QACA;UACA;YACAC;YACAC;UACA;QACA;UACA9D;QACA;QACA;MACA;;MAEA;MACA;MACA;MACA;IACA;IAEA;IACA+D;MAAA;MACA;QACA;QACA/D;QACAA;QAEA;QAEAA;QACAA;;QAEA;QACA;UACA;QACA;;QAEA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;QACA;QACA;QACA;QAAA,KACA;UACA;QACA;;QAEA;QACA;UACAA;;UAEA;UACA;YACAA;YACA;UACA;UAEA;YAAA;UAAA;UACA;YACAA;YACA;YACA;cAAA;YAAA;YACA;cACA;cACAgE;gBACA3C;gBACAiC;gBACAW;gBACAlJ;cACA;cACAiF;YACA;UACA;YACAA;UACA;UACA;QACA;;QAEA;QACA;UACA;UACA;YACA;UACA;UACA;UACA;UACA;QACA;;QAEA;QACA;UACAA;UAEA;YAAA;UAAA;UACA;YACAkE;YACA;cACAA;YACA;;YAEA;YACA;cACAC;cACA9C;cACA+C;cACAC;cACAf;YACA;YACA;;YAEA;YACA;YACA;YACA;;YAEA;YACA;;YAEA;YACA;YAEAnC;cACAC;cACAiB;cACAQ;YACA;YACA7C;UACA;UACA;QACA;;QAEA;QACA;UACAA;UACAA;UAEA;YAAA;UAAA;UACA;YACAsE;YACA;cACAA;YACA;;YAEA;YACA;cAAA;YAAA;YACA;;YAEA;YACA;cACAH;cACA9C;cACA+C;cACAC;cACAf;YACA;YACA;;YAEA;YACA;YACA;YACA;;YAEA;YACA;;YAEA;YACA;YAEAnC;cACAC;cACAiB;YACA;UACA;UACA;QACA;QACA;QACA;UACArC;UACA;YAAA;UAAA;UACA;YAAA;YACA;YACA;cAAA;YAAA;YACA;cACA;cACAuE;gBACAlD;gBACAiC;gBACAW;gBACAZ;cACA;;cAEA;cACA;YACA;UACA;UACA;QACA;;QAEA;QACA;UACArD;UACA;YAAA;UAAA;UACA;YACAuE;YACA;cACAA;YACA;UACA;UACApD;YACAC;YACAiB;UACA;UACA;QACA;;QAGA;QACA;UACA;UACA;YAAA;UAAA;UACA;YACAmC;YACA;cACAA;YACA;UACA;UACA;UACA;UACA;;UAEA;UACA;YACA;YACA;YACA;cACAzD;cACA;cACAA;gBAAAgB;cAAA;YACA;UACA;UAEA;YACA;UACA;UACAZ;YAAAC;YAAAiB;UAAA;UACA;QACA;;QAEA;QACA;UACA;YACA;cACAhB;cACAiC;cACAD;YACA;UACA;UACA;YACA;UACA;UACA;YACA;UACA;UACA;YACAlC;cAAAC;cAAAiB;YAAA;YACA;UACA;UACA;YACAlB;cAAAC;cAAAiB;YAAA;YACA;YACA;UACA;UACA;QACA;;QAIA;QACArC;QACA;;QAEA;QACAA;QACA;MAEA;QACAA;QACAA;QACAA;;QAEA;QACAmB;UACAC;UACAiB;UACAQ;QACA;MACA;IACA;IAEA4B;MACA;MACA;QACA;QACA;UACA;UACA;QACA;UACA;UACA;UACA;QACA;QACA;QACA;MACA;MACA;MACA;QACA;QACA;UACA;UACA;QACA;UACA;UACA;UACA;QACA;QACA;QACA;MACA;;MAIA;MAAA,KACA;QACA;QACA;UACA;UACA;QACA;UACA;UACA;UACA;QACA;QACA;QACA;MACA;MACA;MAAA,KACA;QACAzE;QACA;QACA;UACA;UACA;UACAA;;UAEA;UACA;YAAA;UAAA;QAEA;UACA;UACA;UACAA;;UAEA;UACA;YAAA;UAAA;QAEA;QACA;QACA;MACA,OACA;QACA;QACA;UACA;UACA;QACA;UACA;UACA;UACA;QACA;QACA;QACA;MACA;;MAGA;MAAA,KACA;QACAA;QACA;QACA;UACA;UACA;QACA;UACA;UACA;UACA;QACA;QACA;QACA;MACA;MACA;MAAA,KACA;QACA;QACA;UACA;UACA;QACA;UACA;UACA;UACA;QACA;QACA;QACA;MACA;IAEA;IAEA0E;MAAA;MACA1E;MACAA;MACAA;MACAA;QAAA;MAAA;MAEA;;MAEA;MACA;QACA;UACAA;UACAgE;YAAA;UAAA;UACA;QACA;UACAhE;UACAgE;YAAA;UAAA;UACA;QACA;UACAhE;UACAgE;YAAA;UAAA;UACA;QACA;UACAhE;UACAgE;YAAA;UAAA;UACA;UACA;YACAhE;YACAgE;cACA1J;cACA4B;cACAC;gBACAC;gBACAC;cACA;gBACAD;gBACAC;cACA;cACAC;cACAC;cACAC;cACAC;gBACA4E;gBACAiC;gBACAW;cACA;cACAvH;YACA;YACA;UACA;UACA;QACA;UACAsD;UACA;UACAgE;YAAA;UAAA;UACA;YACAhE;YACAgE;cACA1J;cACA4B;cACAC;cACAG;cACAC;cACAC;cACAC;gBACA4E;gBACAiC;gBACAW;cACA;cACAvH;YACA;YACA;UACA;UACA;QACA;UACAsD;UACAgE;YAAA;UAAA;UACA;QACA;UACAhE;UACAgE;YAAA;UAAA;UACA;QACA;UACAhE;UACAgE;YAAA;UAAA;UACA;QACA;UACAhE;UACAgE;YAAA;UAAA;UACA;QACA;UACAhE;UACA;MAAA;MAGA;QACAA;;QAEA;QACA;UACAA;UACA;QACA;;QAEA;QACA;UACAA;UACA;QACA;;QAEA;QACAgE;QACAhE;;QAEA;QACA;UACAgE;UACAhE;QACA;;QAEA;QACA;UAAA;QAAA;QACAA;QAEA;UACAA;UACA;YACAmE;YACA9C;YACA+C;YACAC;YACAf;YACAvI;UACA;UACA;QACA;UACAiF;UACA;UACA;YACAmE;YACA9C;YACA+C;YACAC;YACAf;YACAvI;UACA;UACA;QACA;QAEAiF;QACAA;UAAA;QAAA;;QAEA;QACA;QACA;QACA;QACAA;;QAEA;QACA;QACAA;;QAEA;QACA;QACAA;QAEAA;MACA;QACAA;QACAA;MACA;IACA;IAEA;IACA2E;MACA;QACA;QACA;QACA;QACA;MACA;MACA;IACA;IAEAC;MACA;QACA;QACA;QACA;QACA;MACA;MACA;IACA;IAEAC;MACA;QACA;QACA;QACA;QACA;MACA;MACA;IACA;IAEA;IACAC;MACArC;IACA;IAEA;IACAsC;MACA;IACA;IAEA;IACAC;MACA7D;QACA8D;QACAC;MACA;IACA;IAEA;IACAC;MACA;IACA;IAEAC;MACA;QACA;QACA;UACA;UACA;YACA;UACA;;UACA;UACA;QACA;QACA;MACA;QACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;QAAA;MAAA;IACA;IAEA;IACAC;MACA;MACA;IACA;IAEAC;MACApE;QACA5G;QACAiH;UACAL;YACAC;YACAiB;UACA;QACA;MACA;IACA;IAIA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEAmD;MACA;MACA;IACA;IAEAC;MACAtE;QACA5G;QACAiH;UACAL;YACAC;YACAiB;UACA;QACA;QACAa;UACA/B;YACAC;YACAiB;UACA;QACA;MACA;IACA;IAEA;IACAqD;MACAvE;QACA5G;QACAiH;UACAL;YACAC;YACAiB;UACA;QACA;QACAa;UACA/B;YACAC;YACAiB;UACA;QACA;MACA;IACA;IAEA;IACAsD;MACAxE;QACAC;MACA;;MAEA;MACAD;QACAM;QACAD;UACAL;UACA;YACA;YACAA;cACAyE;cACApE;gBACAL;kBACAC;kBACAiB;gBACA;cACA;cACAa;gBACA;gBACA/B;kBACAC;kBACAC;kBACAC;kBACAE;oBACAL;sBACA5G;oBACA;kBACA;gBACA;cACA;YACA;UACA;YACA4G;cACAC;cACAiB;YACA;UACA;QACA;QACAa;UACA/B;UACA;UACAA;YACAC;YACAC;YACAC;YACAE;cACAL;gBACA5G;cACA;YACA;UACA;QACA;MACA;IACA;IAEA;IACAsL;MACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAEA;cAAA;gBAAAC;gBACA;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAhG;gBACAmB;kBACAC;kBACAiB;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA4D;MACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QAGA;;QAEA;;QAEA;QACA;QACA;QACA;QACA;QAEA;QACA9E;UACAC;UACAiB;QACA;MACA;QACArC;QACAmB;UACAC;UACAiB;QACA;MACA;IACA;IAEA;IACA6D;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAEA;cAAA;gBAAAF;gBACA;kBACA;kBACAG;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAnG;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEAoG;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACAC;kBACApK;kBACAF;kBACAiB;kBACAC;kBACAE;kBACAxC;kBACAM;kBACAC;kBACAC;kBACA;;kBAEAmL;kBAEAjL;kBACAC;gBACA;gBAAA;gBAAA;gBAAA,OAGA;kBACAb;kBACAK;kBACAP;kBACAI;kBACAM;kBACAC;kBACAC;kBACA;;kBAEAmL;kBAEAjL;kBACAC;gBACA;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEA0E;gBACAmB;kBACAC;kBACAiB;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEAkE;MACA;QACAvG;QAEA;UACA;QACA;QAEA;QAEA;UACAwG;QACA;UACA;UACA;UACA;YACA;cAAAC;cAAAC;cAAAC;cAAAC;cAAAC;cAAAC;YACAN,gBACAO,gBACAA,qBACAA,eACAA,gBACAA,kBACAA,iBACA;UACA;YACA;YACA;YACAP;YAEA;cACAA;YACA;UACA;QACA;UACAA;QACA;QAEAxG;QAEA;UACA;QACA;QAEA;QACA;QACAgH;QAEA;UACA;QACA;UACA;QACA;UACA;QACA;MACA;QACAhH;QACA;MACA;IACA;IAEA;IACAiH;MACA;QACAjH;QAEA;QAEA;UACA;QACA;;QAEA;QACA;UACAwG;QACA;UACA;UACA;YACAA;UACA;UACA;UAAA,KACA;YACA;YACA;cACA;gBAAAC;gBAAAC;gBAAAC;gBAAAC;gBAAAC;gBAAAC;cACA;cACAN,gBACAO,gBACAA,qBACAA,eACAA,iBACAA,mBACAA,iBACA;YACA;cACA;cACA;cACAP;cAEA;gBACAA;cACA;YACA;UACA;QACA;UACAA;QACA;UACAA;QACA;QAEAxG;QAEA;UACA;QACA;;QAEA;QACA;QACA;QAEA;QAEAA;QACA;MAEA;QACAA;QACA;MACA;IACA;IAEA;IACAkH;MACA;MACA;IACA;IAEA;IACAC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACA;gBACA;;gBAEA;gBAAA;gBAAA,WAEAC;gBAAA;gBAAA,OACAC;cAAA;gBAAAC;gBACA;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAtH;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEAuH;MACA;IACA;IAEA;IACAC;MAAA;MACA;MACA;QAAA;MAAA;MACA;IACA;IAEA;IACAC;MACA;MACA;QACA;QACA;MACA;IACA;IAEA;IACAC;MACA;QACAvG;UACAC;UACAiB;QACA;QACA;MACA;MACArC;MACA;MACA;QACAmE;QACA9C;QACA+C;QACAC;QACAf;MACA;;MAEA;MACA;MACA;MACA;MACA;IACA;IACA;IACAqE;MACA;MACA3H;IACA;IAEA;IACA4H;MACA;MACA5H;IACA;IAEA6H;MACA;IACA;IAEAC;MACA;MAEA;;MAEA;MACA;QACA;MACA;QACA;MACA;IACA;IAEA;IACAC;MAAA;MACA;MACA;QACAtM;QACAC;QACAC;QACAC;UACAb;UACAN;UACAC;UACAI;UACAE;UACA8C;QACA;MACA;;MAEA;MACA;QAAA;MAAA;MACA;QACA;UACAkK;UACA;YACAA;UACA;QACA;UACAA;UACA;YACAA;UACA;UACA;YACAA;UACA;QACA;MACA;;MAEA;MACAhI;MACA;;MAEA;MACA;QACA1F;QACA4B;QACAC;QACAG;QACAC;QACAC;QACAC,eACA;UACA4E;UACAiC;UACAW;UACAZ;QACA,EACA;QACA3G;MACA;MAEA;MAEAyE;QACAC;QACAiB;MACA;IACA;IAEA;IACA4F;MACA;MACA;;MAEA;MACA;QACAxM;QACAC;QACAC;QACAC;UACAb;UACAN;UACAC;UACAI;UACAqJ;UACA9C;QACA;MACA;MAEArB;MACA;;MAEA;MACA;QACA1F;QACA4B;QACAC;QACAG;QACAC;QACAC;QACAC,eACA;UACA4E;UACAiC;UACAW;UACAZ;QACA,EACA;QACA3G;MACA;MAEA;MAEAyE;QACAC;QACAiB;MACA;IACA;IAKA;IACA6F;MACA;MACA;;MAEA;MACA;QACAzM;QACAC;QACAC;QACAC;UACAb;UACAN;UACAC;UACAI;UACAE;QACA;MACA;MAEAgF;MACA;;MAEA;MACA;QACA1F;QACA4B;QACAC;QACAG;QACAC;QACAC;QACAC,eACA;UACA4E;UACAiC;UACAW;UACAZ;QACA,EACA;QACA3G;MACA;MAEA;MAEAyE;QACAC;QACAiB;MACA;IACA;IAEA;IACA8F;MAAA;MACA;MACA;QACA1M;QACAC;QACAC;QACAC;UACAb;UACAN;UACAC;UACAI;UACAE;UACA8C;QACA;MACA;;MAEA;MACA;QAAA;MAAA;MACA;QACA;UACAkK;UACA;YACAA;UACA;QACA;UACAA;UACA;YACAA;UACA;UACA;YACAA;UACA;QACA;MACA;;MAEA;MACAhI;MACA;;MAEA;MACA;QACA1F;QACA4B;QACAC;QACAG;QACAC;QACAC;QACAC,eACA;UACA4E;UACAiC;UACAW;UACAZ;QACA,EACA;QACA3G;MACA;MACA;MAEAyE;QACAC;QACAiB;MACA;IACA;IAEA;IACA+F;MACA;QAAA;MAAA;MACA;QACA;QACA;MACA;QACA;QACA;QACA;MACA;MACA;IACA;IAGA;IACAC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEArI;;gBAEA;gBAAA,MACA;kBAAA;kBAAA;gBAAA;gBACAmB;kBACAC;kBACAiB;gBACA;gBAAA;cAAA;gBAIA;gBACAiG;gBACAC;kBAAA;gBAAA;gBACAC;gBAEAxI;;gBAEA;gBAAA,KACAwI;kBAAA;kBAAA;gBAAA;gBACA;gBACArH;kBACAC;gBACA;gBAEA;gBAEAxF;kBACA6M;kBACAhO;kBACA2J;kBACAD;kBACAuE;gBACA;gBAEA1I;gBAAA;gBAAA,OAEA;cAAA;gBAAAgG;gBAEA7E;gBAEA;kBACAA;oBACAC;oBACAiB;kBACA;gBACA;kBACAlB;oBACAC;oBACAiB;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBACA;kBACA;kBACAlB;oBACAC;kBACA;kBAEAuH;oBACAlN;oBACAC;oBACAC;oBACAC;sBACAb;sBACAN;sBACAC;sBACAyJ;sBACArJ;sBACAgD;oBACA;kBACA;kBAEAkC;kBAEA;;kBAEA;kBACA4I;oBACAtO;oBACA4B;oBACAC;oBACAG;oBACAC;oBACAC;oBACAC;sBACA4E;sBACAiC;sBACAW;sBACAZ;oBACA;oBACA3G;kBACA,GAEA;kBACA;kBAEAyE;kBAEAA;oBACAC;oBACAiB;kBACA;gBACA;kBACAlB;oBACAC;oBACAiB;kBACA;gBACA;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAlB;gBACAnB;gBACAmB;kBACAC;kBACAiB;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACAwG;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEA7I;gBAAA,IAEA;kBAAA;kBAAA;gBAAA;gBACAA;gBACAmB;kBACAC;kBACAiB;gBACA;gBAAA;cAAA;gBAIAlB;kBACAC;gBACA;;gBAEA;gBACA;gBAEAxF;kBACA6M;kBACAhO;kBACA2J;kBACAD;kBACAuE;gBACA;gBAEA1I;gBAAA;gBAAA,OAEA;cAAA;gBAAAgG;gBAEA7E;gBAEA;kBACAA;oBACAC;oBACAiB;kBACA;gBACA;kBACAlB;oBACAC;oBACAiB;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAlB;gBACAnB;gBACAmB;kBACAC;kBACAiB;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEAyG;MACA;MACA9I;MACAA;MACA;MACAA;MACAA;IACA;IAEA+I;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IACA;kBAAA;kBAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAGA;gBAAA,YACA3B;gBAAA;gBAAA,OACA4B;cAAA;gBAAA1B;gBACA2B,6DAEA;gBACAC,mCACAC;kBAAA;gBAAA,GACAC;kBACA;kBACA;kBACA;gBACA,GACAC,YAEA;gBACAC,4EAEA;gBACAC;kBACA9N;kBACAC;kBACAC;kBACAC;oBACAb;oBACAN;oBACAC;oBACAI;oBACAE;kBACA;gBACA,GAEA;gBACAwO;kBAAA;gBAAA;gBACA;kBACA;oBACAD;oBACA;sBACAA;oBACA;kBACA;oBACAA;oBACA;sBACAA;oBACA;oBACA;sBACAA;oBACA;kBACA;gBACA;;gBAEA;gBACAvJ;gBACA;gBACA;;gBAEA;gBACAkE;kBACA5J;kBACA4B;kBACAC;kBACAG;kBACAC;kBACAC;kBACAC,eACA;oBACA4E;oBACAiC;oBACAW;oBACAZ;kBACA,EACA;kBACA3G;gBACA,GAEA;gBACA;gBAEAyE;kBACAC;kBACAiB;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEArC;gBACAmB;kBACAC;kBACAiB;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACAoH;MACA;MACAzJ;IACA;IAEA;IACA0J;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;QACA5O;QACAL;QACAC;QACAK;QACAC;QACAC;QACAC;QACAC;QACAC;QAEAkL;QAEAjL;QACAC;QACAC;MACA;MACA;MACA;QACAjB;QACA4B;QACAC;UACAC;UACAC;QACA,GACA;UACAD;UACAC;QACA,EACA;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACArC;QACA4B;QACAC;UACAC;UACAC;QACA;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACArC;QACA4B;QACAC,eACA;UACAC;UACAC;QACA,GACA;UACAD;UACAC;QACA,EACA;QACAS;QACAP;QACAC;QACAC;QACAC;MACA,GAEA;QACApC;QACA4B;QACAC,eACA;UAAAC;UAAAC;QAAA,GACA;UAAAD;UAAAC;QAAA,GACA;UAAAD;UAAAC;QAAA,EACA;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA,GAEA;QACArC;QACA4B;QACAC,eACA;UACAC;UACAC;QACA,GACA;UACAD;UACAC;QACA,GACA;UACAD;UACAC;QACA,EACA;QACAS;QAAA;QACAP;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACArC;QACA4B;QACAC,eACA;UAAAC;UAAAC;QAAA,EACA;QACAC;QACAC;QACAC;QACAC;QACAC;MACA,GAEA;QACApC;QACA4B;QACAC;UACAC;UACAC;QACA,GACA;UACAD;UACAC;QACA,EACA;QACAC;QACAM;QAAA;QACAC,SACA;UAAAT;UAAAC;QAAA,GACA;UAAAD;UAAAC;QAAA,EACA;QACAE;QACAC;QACAC;QACAC;QACAC;MACA,EAEA;MACA;;MAEA;MACA;MACA;MACA;MAEAwE;QACAC;QACAiB;MACA;IACA;IAEA;IACAsH;MAAA;MACA;MACAC;QACA;QACA;MACA;IACA;IAEAC;MACA;MACA;QACAxG;QACA5I;QACAC;MACA;;MAEA;MACA;QACA2I;QACA5I;QACAC;MACA;;MAEA;MACA;QACA2I;QACA5I;QACAC;MACA;;MAEA;MACA;QACA2I;QACA5I;QACAC;MACA;;MAIA;MACA;QACA2I;QACA5I;QACAC;MACA;;MAIA;MACA;QACA2I;QACA5I;QACAC;MACA;;MAEA;MACAsF;QACAqD;QACA5I;QACAC;MACA;MACA;QACA2I;QACA5I;QACAC;MACA;IAEA;IAEAoP;MACA;QACA1K;QACAC;QACA0K;QACAxK;MACA;MACA;IACA;IAEAyK;MACA;QACA5K;QACAC;QACA0K;QACA;MACA;;MACA;IACA;IAMAE;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,KAEA;kBAAA;kBAAA;gBAAA;gBACAjK;gBAAA;cAAA;gBAIA;gBAAA;gBAAA;gBAAA;gBAAA,OAKA;cAAA;gBAAAmC;gBACAnC;gBACA;kBACAA;kBACA;kBACA;kBACA;kBACAkK;kBACAlK;gBACA;kBACAA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAA;cAAA;gBAGA;gBACA;kBACAZ;kBACAC;kBACAC;kBACAC;kBACAC;kBAEAE;kBACAD;gBACA;;gBAEA;gBACA;kBACAL;kBACAC;kBACAC;kBACAC;kBACAC;kBACAE;kBACAD;gBACA;;gBAEA;gBACA;kBACAL;kBACAC;kBACAC;kBACAC;kBACAC;kBACAE;kBACAD;gBACA;;gBAEA;gBACA0B;kBACAC;kBACAiB;kBACAQ;gBACA;;gBAEA;gBACA7C;gBACA;gBACA4J;kBACA5J;kBACA;kBACA;kBACA4J;oBACA5J;oBACA;oBACA;oBACA;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAA;gBACA;gBACAmB;kBACAC;kBACAiB;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACA8H;MACA;QACA;UACA;QAAA;QACA;UACA;QAAA;QACA;UACA;QAAA;QACA;UACA;QAAA;QACA;UACA;QAAA;QACA;UACA;QAAA;QACA;UACA;QAAA;;QAEA;UACA;MAAA;IAEA;IAEA;IACAC;MACA;QACA;UACA;QACA;UACA;QACA;UACA;QAAA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QAEA;UACA;MAAA;IAEA;IAEA;IACAC;MACA;MACArK;IACA;IAEA;IACAsK;MACA;MACAtK;IACA;IAEA;IACA;IACAuK;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;QACAtJ;UAAAC;UAAAiB;QAAA;QACA;MACA;MACA;QACA5G;QACAC;QACAC;QACAC;UACAb;UACAN;UACAC;UACAM;UACAoG;UACAC;UACAgC;QACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAlC;QAAAC;QAAAiB;MAAA;IACA;IAIA;IACAqI;MACA;MACA;MACA;IACA;IAEA;IACAC;MACA;MACA;IACA;IAEA;IACAC;MACA;QACA;UACA;QACA;QAEA;QAEA;UACApE;QACA;UACA;UACA;YACAA;UACA;UACA;UAAA,KACA;YACA;YACA;cACA;gBAAAC;gBAAAC;gBAAAC;gBAAAC;gBAAAC;gBAAAC;cACAN,gBACAO,gBACAA,qBACAA,eACAA,kBACAA,oBACAA,kBACA;YACA;cACA;cACA;cACAP;cAEA;gBACAA;cACA;YACA;UACA;QACA;UACAA;QACA;UACAA;QACA;QAEA;UACA;QACA;;QAEA;QACA;QACA;QACA;QAEA;QAEA;MAEA;QACAxG;QACA;MACA;IACA;EACA;AACA;AAAA,2B;;;;;;;;;;;;;ACzlHA;AAAA;AAAA;AAAA;AAAonC,CAAgB,kjCAAG,EAAC,C;;;;;;;;;;;ACAxoC;AACA,OAAO,KAAU,EAAE,kBAKd","file":"pages/work/index.js","sourcesContent":["import 'uni-pages';\n// @ts-ignore\nwx.__webpack_require_UNI_MP_PLUGIN__ = __webpack_require__;import '@dcloudio/uni-stat/dist/uni-stat.es.js';\nimport Vue from 'vue'\nimport Page from './pages/work/index.vue'\ncreatePage(Page)","import { render, staticRenderFns, recyclableRender, components } from \"./index.vue?vue&type=template&id=51b5538d&scoped=true&\"\nvar renderjs\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nimport style0 from \"./index.vue?vue&type=style&index=0&id=51b5538d&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"51b5538d\",\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"pages/work/index.vue\"\nexport default component.exports","export * from \"-!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--17-0!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/template.js!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=template&id=51b5538d&scoped=true&\"","var components\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  var l2 = _vm.sectionExpanded.aiConfig\n    ? _vm.__map(_vm.aiList, function (ai, index) {\n        var $orig = _vm.__get_orig(ai)\n        var m0 = ai.enabled && _vm.isAiLoginEnabled(ai)\n        var m1 = _vm.isAiLoginEnabled(ai)\n        var m2 = _vm.isAiLoginEnabled(ai)\n        var m3 = !_vm.isAiLoginEnabled(ai) && !_vm.isAiInLoading(ai)\n        var m4 = _vm.isAiInLoading(ai)\n        var m5 = ai.enabled && _vm.isAiLoginEnabled(ai)\n        var m6 = !_vm.isAiLoginEnabled(ai) || _vm.isAiInLoading(ai)\n        var m7 =\n          ai.name === \"腾讯元宝\" && ai.models ? _vm.getModelIndex(ai) : null\n        var m8 =\n          ai.name === \"腾讯元宝\" && ai.models\n            ? !ai.enabled || !_vm.isAiLoginEnabled(ai)\n            : null\n        var m9 =\n          ai.name === \"腾讯元宝\" && ai.models\n            ? _vm.getSelectedModelLabel(ai)\n            : null\n        var g0 = ai.capabilities.length\n        var l0 =\n          g0 > 0 && (ai.name === \"通义千问\" || ai.name === \"知乎直答\")\n            ? _vm.__map(ai.capabilities, function (capability, capIndex) {\n                var $orig = _vm.__get_orig(capability)\n                var m10 = !ai.enabled || !_vm.isAiLoginEnabled(ai)\n                return {\n                  $orig: $orig,\n                  m10: m10,\n                }\n              })\n            : null\n        var l1 =\n          g0 > 0 && !(ai.name === \"通义千问\" || ai.name === \"知乎直答\")\n            ? _vm.__map(ai.capabilities, function (capability, capIndex) {\n                var $orig = _vm.__get_orig(capability)\n                var g1 = !ai.isSingleSelect\n                  ? ai.selectedCapabilities.includes(capability.value)\n                  : null\n                var m11 = !ai.enabled || !_vm.isAiLoginEnabled(ai)\n                return {\n                  $orig: $orig,\n                  g1: g1,\n                  m11: m11,\n                }\n              })\n            : null\n        return {\n          $orig: $orig,\n          m0: m0,\n          m1: m1,\n          m2: m2,\n          m3: m3,\n          m4: m4,\n          m5: m5,\n          m6: m6,\n          m7: m7,\n          m8: m8,\n          m9: m9,\n          g0: g0,\n          l0: l0,\n          l1: l1,\n        }\n      })\n    : null\n  var g2 = _vm.sectionExpanded.promptInput ? _vm.promptInput.length : null\n  var l4 =\n    _vm.taskStarted && _vm.sectionExpanded.taskStatus\n      ? _vm.__map(_vm.enabledAIs, function (ai, index) {\n          var $orig = _vm.__get_orig(ai)\n          var m12 = _vm.getStatusText(ai.status)\n          var m13 = _vm.getStatusIconClass(ai.status)\n          var m14 = _vm.getStatusEmoji(ai.status)\n          var g3 = ai.isExpanded && ai.progressLogs.length > 0\n          var l3 = g3\n            ? _vm.__map(ai.progressLogs, function (log, logIndex) {\n                var $orig = _vm.__get_orig(log)\n                var m15 = _vm.formatTime(log.timestamp)\n                return {\n                  $orig: $orig,\n                  m15: m15,\n                }\n              })\n            : null\n          return {\n            $orig: $orig,\n            m12: m12,\n            m13: m13,\n            m14: m14,\n            g3: g3,\n            l3: l3,\n          }\n        })\n      : null\n  var g4 = _vm.results.length\n  var g5 =\n    g4 > 0 && _vm.currentResult\n      ? _vm.currentResult.aiName.includes(\"智能排版\")\n      : null\n  var m16 =\n    g4 > 0 && _vm.currentResult && !!g5\n      ? _vm.getMediaLabelFromResult(_vm.currentResult)\n      : null\n  var m17 =\n    g4 > 0 && _vm.currentResult\n      ? _vm.currentResult.shareImgUrl &&\n        _vm.isImageFile(_vm.currentResult.shareImgUrl)\n      : null\n  var m18 =\n    g4 > 0 && _vm.currentResult && !m17\n      ? _vm.currentResult.shareImgUrl &&\n        _vm.isPdfFile(_vm.currentResult.shareImgUrl)\n      : null\n  var m19 =\n    g4 > 0 &&\n    _vm.currentResult &&\n    !m17 &&\n    !m18 &&\n    !(_vm.currentResult.aiName === \"DeepSeek\")\n      ? _vm.renderMarkdown(_vm.currentResult.content)\n      : null\n  var l6 = _vm.historyDrawerVisible\n    ? _vm.__map(_vm.groupedHistory, function (group, date) {\n        var $orig = _vm.__get_orig(group)\n        var l5 = _vm.__map(group, function (item, index) {\n          var $orig = _vm.__get_orig(item)\n          var m20 = _vm.formatHistoryTime(item.createTime)\n          return {\n            $orig: $orig,\n            m20: m20,\n          }\n        })\n        return {\n          $orig: $orig,\n          l5: l5,\n        }\n      })\n    : null\n  var g6 = _vm.scoreModalVisible ? _vm.scorePromptList.length : null\n  var m21 = _vm.scoreModalVisible && g6 > 0 ? _vm.getScorePromptIndex() : null\n  var l7 = _vm.scoreModalVisible\n    ? _vm.__map(_vm.results, function (result, index) {\n        var $orig = _vm.__get_orig(result)\n        var g7 = _vm.selectedResults.includes(result.aiName)\n        return {\n          $orig: $orig,\n          g7: g7,\n        }\n      })\n    : null\n  var l8 = _vm.tthFlowVisible\n    ? _vm.__map(_vm.tthFlowLogs, function (log, index) {\n        var $orig = _vm.__get_orig(log)\n        var m22 = _vm.formatTime(log.timestamp)\n        return {\n          $orig: $orig,\n          m22: m22,\n        }\n      })\n    : null\n  var g8 = _vm.tthFlowVisible ? _vm.tthFlowLogs.length : null\n  var g9 = _vm.tthFlowVisible ? _vm.tthFlowImages.length : null\n  _vm.$mp.data = Object.assign(\n    {},\n    {\n      $root: {\n        l2: l2,\n        g2: g2,\n        l4: l4,\n        g4: g4,\n        g5: g5,\n        m16: m16,\n        m17: m17,\n        m18: m18,\n        m19: m19,\n        l6: l6,\n        g6: g6,\n        m21: m21,\n        l7: l7,\n        l8: l8,\n        g8: g8,\n        g9: g9,\n      },\n    }\n  )\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=script&lang=js&\"","<template>\n\t<view class=\"console-container\">\n\t\t<!-- 顶部固定区域 -->\n\t\t<view class=\"header-fixed\">\n\t\t\t<view class=\"header-content\" :style=\"{ paddingTop: statusBarHeight + 'px' }\">\n\t\t\t\t<text class=\"header-title\">AI控制台</text>\n\t\t\t\t<view class=\"header-actions\">\n\t\t\t\t\t<view class=\"action-btn refresh-btn\" @tap=\"refreshAiStatus\">\n\t\t\t\t\t\t<image class=\"action-icon-img\" src=\"https://u3w.com/chatfile/shuaxin.png\" mode=\"aspectFit\">\n\t\t\t\t\t\t</image>\n\n            <!-- 连接状态指示器 -->\n            <view class=\"connection-indicator\" :class=\"[socketTask ? 'connected' : 'disconnected']\"></view>\n\t\t\t\t\t</view>\n\t\t\t\t\t<view class=\"action-btn history-btn\" @tap=\"showHistoryDrawer\">\n\t\t\t\t\t\t<image class=\"action-icon-img\" src=\"https://u3w.com/chatfile/lishi.png\" mode=\"aspectFit\">\n\t\t\t\t\t\t</image>\n\t\t\t\t\t</view>\n\t\t\t\t\t<view class=\"action-btn new-chat-btn\" @tap=\"createNewChat\">\n\t\t\t\t\t\t<image class=\"action-icon-img\" src=\"https://u3w.com/chatfile/chuangjian.png\" mode=\"aspectFit\">\n\t\t\t\t\t\t</image>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t</view>\n\n\n\t\t</view>\n\n\t\t<!-- 主体滚动区域 -->\n\t\t<scroll-view class=\"main-scroll\" scroll-y :scroll-into-view=\"scrollIntoView\" :enhanced=\"true\" :bounces=\"true\"\n\t\t\t:show-scrollbar=\"false\" :fast-deceleration=\"false\"\n\t\t\t:style=\"{ height: 'calc(100vh - ' + (statusBarHeight + 100) + 'px)', paddingTop: (statusBarHeight + 60) + 'px' }\">\n\n\t\t\t<!-- AI配置区块 -->\n\t\t\t<view class=\"section-block\" id=\"ai-config\">\n\t\t\t\t<view class=\"section-header\" @tap=\"toggleSection('aiConfig')\">\n\t\t\t\t\t<text class=\"section-title\">AI选择配置</text>\n\t\t\t\t\t<text class=\"section-arrow\">\n\t\t\t\t\t\t{{ sectionExpanded.aiConfig ? '▼' : '▶' }}\n\t\t\t\t\t</text>\n\t\t\t\t</view>\n\t\t\t\t<view class=\"section-content\" v-if=\"sectionExpanded.aiConfig\">\n\t\t\t\t\t<view class=\"ai-grid\">\n\t\t\t\t\t\t<view v-for=\"(ai, index) in aiList\" :key=\"index\" class=\"ai-card\"\n\t\t\t\t\t\t\t:class=\"[ai.enabled && isAiLoginEnabled(ai) ? 'ai-enabled' : '', !isAiLoginEnabled(ai) ? 'ai-disabled' : '']\">\n\t\t\t\t\t\t\t<view class=\"ai-header\">\n\t\t\t\t\t\t\t\t<!-- <image class=\"ai-avatar\" :src=\"ai.avatar\" mode=\"aspectFill\" :class=\"[!isAiLoginEnabled(ai) ? 'avatar-disabled' : '']\"></image> -->\n\t\t\t\t\t\t\t\t<view class=\"ai-info\">\n\t\t\t\t\t\t\t\t\t<view class=\"ai-name-container\">\n\t\t\t\t\t\t\t\t\t\t<text class=\"ai-name\" :class=\"[!isAiLoginEnabled(ai) ? 'name-disabled' : '']\">{{\n\t\t\t\t\t\t\t\t\t\t\tai.name }}</text>\n                    <text\n                        v-if=\"!isAiLoginEnabled(ai) && !isAiInLoading(ai)\"\n                          class=\"login-required\"\n                    >\n                      需登录\n                    </text>\n\t\t\t\t\t\t\t\t\t\t<text v-if=\"isAiInLoading(ai)\" class=\"loading-text\">检查中...</text>\n\t\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t\t\t<switch :checked=\"ai.enabled && isAiLoginEnabled(ai)\"\n\t\t\t\t\t\t\t\t\t\t:disabled=\"!isAiLoginEnabled(ai) || isAiInLoading(ai)\"\n\t\t\t\t\t\t\t\t\t\t@change=\"toggleAI(ai, $event)\" color=\"#409EFF\" style=\"transform: scale(0.8);\" />\n\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t<!-- 腾讯元宝模型选择 -->\n\t\t\t\t\t\t\t<view v-if=\"ai.name === '腾讯元宝' && ai.models\" class=\"model-selection\">\n\t\t\t\t\t\t\t\t<text class=\"model-label\">模型选择:</text>\n\t\t\t\t\t\t\t\t<picker mode=\"selector\" :range=\"ai.models\" range-key=\"label\" :value=\"getModelIndex(ai)\" \n\t\t\t\t\t\t\t\t\t@change=\"onModelChange(ai, $event)\" :disabled=\"!ai.enabled || !isAiLoginEnabled(ai)\">\n\t\t\t\t\t\t\t\t\t<view class=\"model-picker\">\n\t\t\t\t\t\t\t\t\t\t<text class=\"model-text\">{{ getSelectedModelLabel(ai) }}</text>\n\t\t\t\t\t\t\t\t\t\t<text class=\"picker-arrow\">▼</text>\n\t\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t\t</picker>\n\t\t\t\t\t\t\t</view>\n              <view class=\"ai-capabilities\" v-if=\"ai.capabilities.length > 0\">\n                <!-- 通义千问和知乎直答使用单选按钮逻辑 -->\n                <view v-if=\"ai.name === '通义千问' || ai.name === '知乎直答'\" class=\"capability-tags-container\">\n                  <view v-for=\"(capability, capIndex) in ai.capabilities\"\n                        :key=\"capIndex\"\n                        class=\"capability-tag\"\n                        :class=\"[ai.selectedCapability === capability.value ? 'capability-active' : '', (!ai.enabled || !isAiLoginEnabled(ai)) ? 'capability-disabled' : '']\"\n                        @tap=\"selectSingleCapability(ai, capability.value)\">\n                    <text class=\"capability-text\">{{ capability.label }}</text>\n                  </view>\n                </view>\n                <!-- 其他ai使用原有逻辑 -->\n                <view v-else class=\"capability-tags-container\">\n                  <view v-for=\"(capability, capIndex) in ai.capabilities\"\n                        :key=\"capIndex\"\n                        class=\"capability-tag\"\n                        :class=\"[\n                          ai.isSingleSelect\n                            ? (ai.selectedCapabilities === capability.value ? 'capability-active' : '')\n                            : (ai.selectedCapabilities.includes(capability.value) ? 'capability-active' : ''),\n                          (!ai.enabled || !isAiLoginEnabled(ai)) ? 'capability-disabled' : ''\n                        ]\"\n                        @tap=\"toggleCapability(ai, capability.value)\">\n                    <text class=\"capability-text\">{{ capability.label }}</text>\n                  </view>\n                </view>\n              </view>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t</view>\n\n\t\t\t<!-- 提示词输入区块 -->\n\t\t\t<view class=\"section-block\" id=\"prompt-input\">\n\t\t\t\t<view class=\"section-header\" @tap=\"toggleSection('promptInput')\">\n\t\t\t\t\t<text class=\"section-title\">提示词输入</text>\n\t\t\t\t\t<text class=\"section-arrow\">\n\t\t\t\t\t\t{{ sectionExpanded.promptInput ? '▼' : '▶' }}\n\t\t\t\t\t</text>\n\t\t\t\t</view>\n\t\t\t\t<view class=\"section-content\" v-if=\"sectionExpanded.promptInput\">\n\t\t\t\t\t<textarea class=\"prompt-textarea\" v-model=\"promptInput\" placeholder=\"请输入提示词\" maxlength=\"2000\"\n\t\t\t\t\t\tshow-confirm-bar=\"false\" auto-height></textarea>\n\t\t\t\t\t<view class=\"prompt-footer\">\n\t\t\t\t\t\t<text class=\"word-count\">{{ promptInput.length }}/2000</text>\n\t\t\t\t\t\t<button class=\"send-btn\" :class=\"[!canSend ? 'send-btn-disabled' : '']\" :disabled=\"!canSend\"\n\t\t\t\t\t\t\t@tap=\"sendPrompt\">\n\t\t\t\t\t\t\t发送\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t</view>\n\n\t\t\t<!-- 执行状态区块 -->\n\t\t\t<view class=\"section-block\" v-if=\"taskStarted\" id=\"task-status\">\n\t\t\t\t<view class=\"section-header\" @tap=\"toggleSection('taskStatus')\">\n\t\t\t\t\t<text class=\"section-title\">任务执行状态</text>\n\t\t\t\t\t<text class=\"section-arrow\">\n\t\t\t\t\t\t{{ sectionExpanded.taskStatus ? '▼' : '▶' }}\n\t\t\t\t\t</text>\n\t\t\t\t</view>\n\t\t\t\t<view class=\"section-content\" v-if=\"sectionExpanded.taskStatus\">\n\t\t\t\t\t<!-- 任务流程 -->\n\t\t\t\t\t<view class=\"task-flow\">\n\t\t\t\t\t\t<view v-for=\"(ai, index) in enabledAIs\" :key=\"index\" class=\"task-item\">\n\t\t\t\t\t\t\t<view class=\"task-header\" @tap=\"toggleTaskExpansion(ai)\">\n\t\t\t\t\t\t\t\t<view class=\"task-left\">\n\t\t\t\t\t\t\t\t\t<text class=\"task-arrow\">\n\t\t\t\t\t\t\t\t\t\t{{ ai.isExpanded ? '▼' : '▶' }}\n\t\t\t\t\t\t\t\t\t</text>\n\t\t\t\t\t\t\t\t\t<image class=\"task-avatar\" :src=\"ai.avatar\" mode=\"aspectFill\"></image>\n\t\t\t\t\t\t\t\t\t<text class=\"task-name\">{{ ai.name }}</text>\n\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t\t<view class=\"task-right\">\n\t\t\t\t\t\t\t\t\t<text class=\"status-text\">{{ getStatusText(ai.status) }}</text>\n\t\t\t\t\t\t\t\t\t<text class=\"status-icon\" :class=\"[getStatusIconClass(ai.status)]\">\n\t\t\t\t\t\t\t\t\t\t{{ getStatusEmoji(ai.status) }}\n\t\t\t\t\t\t\t\t\t</text>\n\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t<!-- 进度日志 -->\n\t\t\t\t\t\t\t<view class=\"progress-logs\" v-if=\"ai.isExpanded && ai.progressLogs.length > 0\">\n\t\t\t\t\t\t\t\t<view v-for=\"(log, logIndex) in ai.progressLogs\" :key=\"logIndex\" class=\"progress-item\">\n\t\t\t\t\t\t\t\t\t<view class=\"progress-dot\" :class=\"[log.isCompleted ? 'dot-completed' : '']\"></view>\n\t\t\t\t\t\t\t\t\t<view class=\"progress-content\">\n\t\t\t\t\t\t\t\t\t\t<text class=\"progress-time\">{{ formatTime(log.timestamp) }}</text>\n\t\t\t\t\t\t\t\t\t\t<text class=\"progress-text\">{{ log.content }}</text>\n\t\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t</view>\n\n\t\t\t\t\t<!-- 主机可视化 -->\n\t\t\t\t\t<!-- \t<view class=\"screenshots-section\" v-if=\"screenshots.length > 0\">\n\t\t\t\t\t\t<view class=\"screenshots-header\">\n\t\t\t\t\t\t\t<text class=\"section-subtitle\">主机可视化</text>\n\t\t\t\t\t\t\t<switch :checked=\"autoPlay\" @change=\"toggleAutoPlay\" color=\"#409EFF\"\n\t\t\t\t\t\t\t\tstyle=\"transform: scale(0.8);\" />\n\t\t\t\t\t\t\t<text class=\"auto-play-text\">自动轮播</text>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t\t<swiper class=\"screenshots-swiper\" :autoplay=\"autoPlay\" :interval=\"3000\" :duration=\"500\"\n\t\t\t\t\t\t\tindicator-dots indicator-color=\"rgba(255,255,255,0.5)\" indicator-active-color=\"#409EFF\">\n\t\t\t\t\t\t\t<swiper-item v-for=\"(screenshot, index) in screenshots\" :key=\"index\">\n\t\t\t\t\t\t\t\t<image class=\"screenshot-image\" :src=\"screenshot\" mode=\"aspectFit\"\n\t\t\t\t\t\t\t\t\t@tap=\"previewImage(screenshot)\"></image>\n\t\t\t\t\t\t\t</swiper-item>\n\t\t\t\t\t\t</swiper>\n\t\t\t\t\t</view> -->\n\t\t\t\t</view>\n\t\t\t</view>\n\n\t\t\t<!-- 结果展示区块 -->\n\t\t\t<view class=\"section-block\" v-if=\"results.length > 0\" id=\"results\">\n\t\t\t\t<view class=\"section-header\">\n\t\t\t\t\t<text class=\"section-title\">执行结果</text>\n\t\t\t\t\t<button class=\"score-btn\" size=\"mini\" @tap=\"showScoreModal\">智能评分</button>\n\t\t\t\t</view>\n\t\t\t\t<view class=\"section-content\">\n\t\t\t\t\t<!-- 结果选项卡 -->\n\t\t\t\t\t<scroll-view class=\"result-tabs\" scroll-x>\n\t\t\t\t\t\t<view class=\"tab-container\">\n\t\t\t\t\t\t\t<view v-for=\"(result, index) in results\" :key=\"index\" class=\"result-tab\"\n\t\t\t\t\t\t\t\t:class=\"[activeResultIndex === index ? 'tab-active' : '']\"\n\t\t\t\t\t\t\t\t@tap=\"switchResultTab(index)\">\n\t\t\t\t\t\t\t\t<text class=\"tab-text\">{{ result.aiName }}</text>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t</scroll-view>\n\n\t\t\t\t\t<!-- 结果内容 -->\n\t\t\t\t\t<view class=\"result-content\" v-if=\"currentResult\">\n\t\t\t\t\t\t<!-- 结果标题 -->\n\t\t\t\t\t\t<!-- <view class=\"result-header\">\n\t\t\t\t\t\t\t<text class=\"result-title\">{{ currentResult.aiName }}的执行结果</text>\n\t\t\t\t\t\t</view> -->\n\n\t\t\t\t\t\t<!-- 操作按钮 -->\n\t\t\t\t\t\t<view class=\"result-actions\">\n\t\t\t\t\t\t\t<button class=\"share-link-btn\" size=\"mini\" v-if=\"currentResult.shareUrl\"\n\t\t\t\t\t\t\t\t@tap=\"openShareUrl(currentResult.shareUrl)\">\n\t\t\t\t\t\t\t\t复制原链接\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button class=\"action-btn-small\" size=\"mini\"\n\t\t\t\t\t\t\t\t@tap=\"copyResult(currentResult.content)\">复制(纯文本)</button>\n\t\t\t\t\t\t\t<button v-if=\"!currentResult.aiName.includes('智能排版')\" class=\"collect-btn\" size=\"mini\"\n\t\t\t\t\t\t\t\t@tap=\"showLayoutModal\">智能排版</button>\n\t\t\t\t\t\t\t<button v-else class=\"collect-btn\" size=\"mini\"\n\t\t\t\t\t\t\t\t@tap=\"handleDirectPushToWechat(currentResult)\">投递到{{ getMediaLabelFromResult(currentResult) }}</button>\n\t\t\t\t\t\t</view>\n\n\t\t\t\t\t\t<!-- 分享图片或内容 -->\n\t\t\t\t\t\t<view class=\"result-body\">\n\t\t\t\t\t\t\t<!-- 图片内容 -->\n\t\t\t\t\t\t\t<view v-if=\"currentResult.shareImgUrl && isImageFile(currentResult.shareImgUrl)\"\n\t\t\t\t\t\t\t\tclass=\"result-image-container\">\n\t\t\t\t\t\t\t\t<image class=\"result-image\" :src=\"currentResult.shareImgUrl\" mode=\"widthFix\"\n\t\t\t\t\t\t\t\t\t@tap=\"previewImage(currentResult.shareImgUrl)\"></image>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t<!-- PDF文件内容 -->\n\t\t\t\t\t\t\t<view v-else-if=\"currentResult.shareImgUrl && isPdfFile(currentResult.shareImgUrl)\"\n\t\t\t\t\t\t\t\tclass=\"result-pdf-container\">\n\t\t\t\t\t\t\t\t<view class=\"pdf-placeholder\">\n\t\t\t\t\t\t\t\t\t<view class=\"pdf-icon\">📄</view>\n\t\t\t\t\t\t\t\t\t<text class=\"pdf-text\">PDF文件</text>\n\t\t\t\t\t\t\t\t\t<view class=\"pdf-actions\">\n\t\t\t\t\t\t\t\t\t\t<button class=\"pdf-btn download-btn\" size=\"mini\"\n\t\t\t\t\t\t\t\t\t\t\t@tap=\"openPdfFile(currentResult.shareImgUrl)\">\n\t\t\t\t\t\t\t\t\t\t\t打开文件\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t<button class=\"pdf-btn copy-btn\" size=\"mini\"\n\t\t\t\t\t\t\t\t\t\t\t@tap=\"copyPdfUrl(currentResult.shareImgUrl)\">\n\t\t\t\t\t\t\t\t\t\t\t复制链接\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t</view>\n              <!-- 文字内容 -->\n              <view v-else class=\"result-text\">\n                <!-- 特殊处理DeepSeek响应 -->\n                <rich-text v-if=\"currentResult.aiName === 'DeepSeek'\" :nodes=\"currentResult.content\"></rich-text>\n                <rich-text v-else :nodes=\"renderMarkdown(currentResult.content)\"></rich-text>\n              </view>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t</view>\n\t\t</scroll-view>\n\n\t\t<!-- 历史记录抽屉 -->\n\t\t<view v-if=\"historyDrawerVisible\" class=\"drawer-mask\" @tap=\"closeHistoryDrawer\">\n\t\t\t<view class=\"drawer-container\" @tap.stop>\n\t\t\t\t<view class=\"drawer-content\">\n\t\t\t\t\t<view class=\"drawer-header\">\n\t\t\t\t\t\t<text class=\"drawer-title\">历史会话记录</text>\n\t\t\t\t\t\t<text class=\"close-icon\" @tap=\"closeHistoryDrawer\">✕</text>\n\t\t\t\t\t</view>\n\t\t\t\t\t<scroll-view class=\"history-list\" scroll-y>\n\t\t\t\t\t\t<view v-for=\"(group, date) in groupedHistory\" :key=\"date\" class=\"history-group\">\n\t\t\t\t\t\t\t<text class=\"history-date\">{{ date }}</text>\n\t\t\t\t\t\t\t<view v-for=\"(item, index) in group\" :key=\"index\" class=\"history-item\"\n\t\t\t\t\t\t\t\t@tap=\"loadHistoryItem(item)\">\n\t\t\t\t\t\t\t\t<text class=\"history-prompt\">{{ item.userPrompt }}</text>\n\t\t\t\t\t\t\t\t<text class=\"history-time\">{{ formatHistoryTime(item.createTime) }}</text>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t</scroll-view>\n\t\t\t\t</view>\n\t\t\t</view>\n\t\t</view>\n\n\t\t<!-- 智能评分弹窗 -->\n\t\t<view v-if=\"scoreModalVisible\" class=\"popup-mask\" @tap=\"closeScoreModal\">\n\t\t\t<view class=\"score-modal\" @tap.stop>\n\t\t\t\t<view class=\"score-header\">\n\t\t\t\t\t<text class=\"score-title\">智能评分</text>\n\t\t\t\t\t<text class=\"close-icon\" @tap=\"closeScoreModal\">✕</text>\n\t\t\t\t</view>\n\t\t\t\t<view class=\"score-content\">\n\t\t\t\t\t<!-- AI选择 -->\n\t\t\t\t\t<view class=\"ai-selection-section\">\n\t\t\t\t\t\t<text class=\"score-subtitle\">选择评分AI：</text>\n\t\t\t\t\t\t<view class=\"ai-radio-group\">\n\t\t\t\t\t\t\t<view class=\"ai-radio-item\"\n\t\t\t\t\t\t\t\t:class=\"{'active': scoreAI === '豆包'}\"\n\t\t\t\t\t\t\t\t@tap=\"selectScoreAI('豆包')\">\n\t\t\t\t\t\t\t\t<text class=\"ai-icon\">🤖</text>\n\t\t\t\t\t\t\t\t<text class=\"ai-text\">豆包</text>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t<view class=\"ai-radio-item\"\n\t\t\t\t\t\t\t\t:class=\"{'active': scoreAI === 'DeepSeek'}\"\n\t\t\t\t\t\t\t\t@tap=\"selectScoreAI('DeepSeek')\">\n\t\t\t\t\t\t\t\t<text class=\"ai-icon\">🧠</text>\n\t\t\t\t\t\t\t\t<text class=\"ai-text\">DeepSeek</text>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t</view>\n\t\t\t\t\t<view class=\"score-prompt-section\">\n\t\t\t\t\t\t<text class=\"score-subtitle\">评分提示词：</text>\n\t\t\t\t\t<!-- 评分模板选择器 -->\n\t\t\t\t\t<view class=\"template-selector\" v-if=\"scorePromptList.length > 0\">\n\t\t\t\t\t\t<picker mode=\"selector\" :range=\"scorePromptList\" range-key=\"name\" :value=\"getScorePromptIndex()\" \n\t\t\t\t\t\t\t@change=\"onScorePromptChange\">\n\t\t\t\t\t\t\t<view class=\"picker-display\">\n\t\t\t\t\t\t\t\t<text class=\"picker-text\">{{ selectedScorePrompt || '选择评分模板（可选）' }}</text>\n\t\t\t\t\t\t\t\t<text class=\"picker-arrow\">▼</text>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t</picker>\n\t\t\t\t\t</view>\n\t\t\t\t\t\t<textarea class=\"score-textarea\" v-model=\"scorePrompt\"\n\t\t\t\t\t\t\tplaceholder=\"请输入评分提示词，例如：请从内容质量、逻辑性、创新性等方面进行评分\" maxlength=\"1000\"></textarea>\n\t\t\t\t\t</view>\n\t\t\t\t\t<view class=\"score-selection\">\n\t\t\t\t\t\t<text class=\"score-subtitle\">选择要评分的内容：</text>\n\t\t\t\t\t\t<checkbox-group @change=\"toggleResultSelection\">\n\t\t\t\t\t\t\t<view class=\"score-checkboxes\">\n\t\t\t\t\t\t\t\t<label v-for=\"(result, index) in results\" :key=\"index\" class=\"checkbox-item\">\n\t\t\t\t\t\t\t\t\t<checkbox :value=\"result.aiName\"\n\t\t\t\t\t\t\t\t\t\t:checked=\"selectedResults.includes(result.aiName)\" />\n\t\t\t\t\t\t\t\t\t<text class=\"checkbox-text\">{{ result.aiName }}</text>\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t</checkbox-group>\n\t\t\t\t\t</view>\n\n\t\t\t\t\t<button class=\"score-submit-btn\" :disabled=\"!canScore\" @tap=\"handleScore\">\n\t\t\t\t\t\t开始评分\n\t\t\t\t\t</button>\n\t\t\t\t</view>\n\t\t\t</view>\n\t\t</view>\n\n    <!-- 媒体投递弹窗 -->\n    <view v-if=\"layoutModalVisible\" class=\"popup-mask\" @tap=\"closeLayoutModal\">\n      <view class=\"score-modal\" @tap.stop>\n        <view class=\"score-header\">\n          <text class=\"score-title\">智能排版设置</text>\n          <text class=\"close-icon\" @tap=\"closeLayoutModal\">✕</text>\n        </view>\n        <view class=\"score-content\">\n          <!-- AI选择 -->\n          <view class=\"ai-selection-section\">\n            <text class=\"score-subtitle\">选择排版AI：</text>\n            <view class=\"ai-radio-group\">\n              <view class=\"ai-radio-item\"\n                    :class=\"{'active': layoutAI === '豆包'}\"\n                    @tap=\"selectLayoutAI('豆包')\">\n                <text class=\"ai-icon\">🤖</text>\n                <text class=\"ai-text\">豆包</text>\n              </view>\n              <view class=\"ai-radio-item\"\n                    :class=\"{'active': layoutAI === 'DeepSeek'}\"\n                    @tap=\"selectLayoutAI('DeepSeek')\">\n                <text class=\"ai-icon\">🧠</text>\n                <text class=\"ai-text\">DeepSeek</text>\n              </view>\n            </view>\n          </view>\n\n          <!-- 媒体选择 -->\n          <view class=\"media-selection-section\">\n            <text class=\"score-subtitle\">选择投递媒体：</text>\n            <view class=\"media-radio-group\">\n              <view class=\"media-radio-item\"\n                    :class=\"{'active': selectedMedia === 'wechat_layout'}\"\n                    @tap=\"selectMedia('wechat_layout')\">\n                <text class=\"media-icon\">📱</text>\n                <text class=\"media-text\">公众号</text>\n              </view>\n              <view class=\"media-radio-item\"\n                    :class=\"{'active': selectedMedia === 'zhihu_layout'}\"\n                    @tap=\"selectMedia('zhihu_layout')\">\n                <text class=\"media-icon\">📝</text>\n                <text class=\"media-text\">知乎</text>\n              </view>\n            </view>\n            <view class=\"media-description\">\n              <text v-if=\"selectedMedia === 'wechat_layout'\" class=\"description-text\">\n                📝 将内容排版为适合微信公众号的HTML格式，完成后可手动投递到草稿箱\n              </text>\n              <text v-else-if=\"selectedMedia === 'zhihu_layout'\" class=\"description-text\">\n                📝 将内容排版为适合知乎的文本格式，完成后可手动投递到草稿箱\n              </text>\n            </view>\n          </view>\n\n          <button class=\"score-submit-btn\" :disabled=\"!currentLayoutResult\" @tap=\"handleLayout\">\n            开始排版\n          </button>\n        </view>\n\t\t\t</view>\n\t\t</view>\n\n\t\t<!-- 微头条文章编辑弹窗 -->\n\t\t<view v-if=\"tthArticleEditVisible\" class=\"popup-mask\" @tap=\"closeTthArticleEditModal\">\n\t\t\t<view class=\"score-modal\" @tap.stop>\n\t\t\t\t<view class=\"score-header\">\n\t\t\t\t\t<text class=\"score-title\">微头条文章编辑</text>\n\t\t\t\t\t<text class=\"close-icon\" @tap=\"closeTthArticleEditModal\">✕</text>\n\t\t\t\t</view>\n\t\t\t\t<view class=\"score-content\">\n\t\t\t\t\t<view class=\"score-prompt-section\">\n\t\t\t\t\t\t<text class=\"score-subtitle\">文章标题：</text>\n\t\t\t\t\t\t<input type=\"text\" v-model=\"tthArticleTitle\" placeholder=\"请输入文章标题\" maxlength=\"100\" />\n\t\t\t\t\t</view>\n\t\t\t\t\t<view class=\"score-prompt-section\">\n\t\t\t\t\t\t<text class=\"score-subtitle\">文章内容：</text>\n\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\tclass=\"score-textarea\"\n\t\t\t\t\t\t\t:class=\"{ 'content-exceeded': isTthArticleContentExceeded }\"\n\t\t\t\t\t\t\tv-model=\"tthArticleContent\"\n\t\t\t\t\t\t\tplaceholder=\"请输入文章内容\"\n\t\t\t\t\t\t\t:maxlength=\"-1\"\n\t\t\t\t\t\t\t:auto-height=\"true\"\n\t\t\t\t\t\t\t:show-confirm-bar=\"false\"\n\t\t\t\t\t\t\t:hold-keyboard=\"true\"\n\t\t\t\t\t\t\t:adjust-position=\"false\"\n\t\t\t\t\t\t\t@focus=\"handleTextareaFocus\"\n\t\t\t\t\t\t\trows=\"5\">\n\t\t\t\t\t\t</textarea>\n\t\t\t\t\t\t<view class=\"char-count\" :class=\"{ 'char-count-exceeded': isTthArticleContentExceeded }\">\n\t\t\t\t\t\t\t{{ tthArticleContentLength }}/2000\n\t\t\t\t\t\t</view>\n\t\t\t\t\t</view>\n\t\t\t\t\t<button class=\"score-submit-btn\" @tap=\"confirmTTHPublish\">\n\t\t\t\t\t\t发布文章\n\t\t\t\t\t</button>\n\t\t\t\t</view>\n\t\t\t</view>\n\t\t</view>\n\n\t\t<!-- 微头条发布流程弹窗 -->\n\t\t<view v-if=\"tthFlowVisible\" class=\"popup-mask\" @tap=\"closeTthFlowDialog\">\n\t\t\t<view class=\"score-modal\" @tap.stop>\n\t\t\t\t<view class=\"score-header\">\n\t\t\t\t\t<text class=\"score-title\">微头条发布流程</text>\n\t\t\t\t\t<text class=\"close-icon\" @tap=\"closeTthFlowDialog\">✕</text>\n\t\t\t\t</view>\n\t\t\t\t<view class=\"score-content\">\n\t\t\t\t\t<view class=\"score-prompt-section\">\n\t\t\t\t\t\t<text class=\"score-subtitle\">发布流程日志：</text>\n\t\t\t\t\t\t<scroll-view style=\"max-height: 200px;\" scroll-y>\n\t\t\t\t\t\t\t<view v-for=\"(log, index) in tthFlowLogs\" :key=\"index\" style=\"margin-bottom: 10px;\">\n\t\t\t\t\t\t\t\t<text style=\"color: #666;\">{{ formatTime(log.timestamp) }}</text>\n\t\t\t\t\t\t\t\t<text style=\"margin-left: 10px;\">{{ log.content }}</text>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t<view v-if=\"tthFlowLogs.length === 0\" style=\"text-align: center; color: #999; padding: 20px;\">暂无流程日志...</view>\n\t\t\t\t\t\t</scroll-view>\n\t\t\t\t\t</view>\n\t\t\t\t\t<view class=\"score-prompt-section\" v-if=\"tthFlowImages.length > 0\">\n\t\t\t\t\t\t<text class=\"score-subtitle\">发布流程图片：</text>\n\t\t\t\t\t\t<scroll-view style=\"max-height: 200px;\" scroll-x>\n\t\t\t\t\t\t\t<image v-for=\"(img, idx) in tthFlowImages\" :key=\"idx\" :src=\"img\" style=\"width: 120px; height: 120px; margin-right: 10px; border-radius: 8px;\" mode=\"aspectFill\" @tap=\"previewImage(img)\" />\n\t\t\t\t\t\t</scroll-view>\n\t\t\t\t\t</view>\n\t\t\t\t\t<view style=\"display: flex; justify-content: center; margin-top: 20px;\">\n\t\t\t\t\t\t<button class=\"score-submit-btn\" style=\"width: 200px;\" @tap=\"closeTthFlowDialog\">关闭</button>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t</view>\n\t\t</view>\n\t</view>\n</template>\n\n<script>\n\timport {\n\t\tmarked\n\t} from 'marked';\n\timport {\n\t\tmessage, saveUserChatData, getChatHistory, pushAutoOffice, getMediaCallWord, updateMediaCallWord, getScoreWord\n  } from \"@/api/wechat/aigc\";\n\timport {\n\t\tv4 as uuidv4\n\t} from 'uuid';\n\timport storage from '@/utils/storage'\n\timport constant from '@/utils/constant'\n  import { getToken } from '@/utils/auth';\n  import { getCorpId, ensureCorpIdOnShow, ensureLatestCorpId } from '@/utils/corpId'\n\n\texport default {\n\t\tname: 'MiniConsole',\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\t// 系统信息\n\t\t\t\tstatusBarHeight: 0,\n\t\t\t\t\n\t\t\t\t// 用户信息\n\t\t\t\tuserId: '',\n\t\t\t\tcorpId: '',\n\t\t\t\tchatId: '',\n\t\t\t\texpandedHistoryItems: {},\n\t\t\t\tuserInfoReq: {\n\t\t\t\t\tuserPrompt: '',\n\t\t\t\t\tuserId: '',\n\t\t\t\t\tcorpId: '',\n\t\t\t\t\ttaskId: '',\n\t\t\t\t\troles: '',\n\t\t\t\t\ttoneChatId: '',\n\t\t\t\t\tybDsChatId: '',\n\t\t\t\t\tdbChatId: '',\n          tyChatId: '',\n\n          baiduChatId: '',\n          zhzdChatId: '',\n\t\t\t\t\tisNewChat: true\n\t\t\t\t},\n\t\t\t\tjsonRpcReqest: {\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: '',\n\t\t\t\t\tmethod: '',\n\t\t\t\t\tparams: {}\n\t\t\t\t},\n\n\t\t\t\t// 区域展开状态\n\t\t\t\tsectionExpanded: {\n\t\t\t\t\taiConfig: true,\n\t\t\t\t\tpromptInput: true,\n\t\t\t\t\ttaskStatus: true\n\t\t\t\t},\n\n\t\t\t\t// AI配置（参考PC端完整配置）\n\t\t\t\taiList: [{\n            name: 'DeepSeek',\n            avatar: 'https://u3w.com/chatfile/Deepseek.png',\n            capabilities: [{\n              label: '深度思考',\n              value: 'deep_thinking'\n            },\n              {\n                label: '联网搜索',\n                value: 'web_search'\n              }\n            ],\n            selectedCapabilities: ['deep_thinking', 'web_search'],\n            enabled: true,\n            status: 'idle',\n            progressLogs: [],\n            isExpanded: true,\n            isSingleSelect: false,  // 添加单选标记\n          },\n\t\t\t\t\t{\n\t\t\t\t\t\tname: '豆包',\n\t\t\t\t\t\tavatar: 'https://u3w.com/chatfile/%E8%B1%86%E5%8C%85.png',\n\t\t\t\t\t\tcapabilities: [{\n\t\t\t\t\t\t\tlabel: '深度思考',\n\t\t\t\t\t\t\tvalue: 'deep_thinking'\n\t\t\t\t\t\t}],\n\t\t\t\t\t\tselectedCapabilities: ['deep_thinking'],\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tstatus: 'idle',\n\t\t\t\t\t\tprogressLogs: [],\n\t\t\t\t\t\tisExpanded: true,\n            isSingleSelect: false,  // 添加单选标记\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: '腾讯元宝',\n\t\t\t\t\t\tavatar: 'https://u3w.com/chatfile/yuanbao.png',\n\t\t\t\t\t\tcapabilities: [{\n\t\t\t\t\t\t\t\tlabel: '深度思考',\n\t\t\t\t\t\t\t\tvalue: 'deep_thinking'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: '联网搜索',\n\t\t\t\t\t\t\t\tvalue: 'web_search'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\tselectedCapabilities: ['deep_thinking', 'web_search'],\n\t\t\t\t\t\tselectedModel: 'hunyuan', // 默认选择混元\n\t\t\t\t\t\tmodels: [\n\t\t\t\t\t\t\t{ label: '混元', value: 'hunyuan' },\n\t\t\t\t\t\t\t{ label: 'DeepSeek', value: 'deepseek' }\n\t\t\t\t\t\t],\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tstatus: 'idle',\n\t\t\t\t\t\tprogressLogs: [],\n\t\t\t\t\t\tisExpanded: true,\n\t\t\t\t\t\tisSingleSelect: false\n\t\t\t\t\t},\n          {\n            name: '通义千问',\n            avatar: 'https://u3w.com/chatfile/TongYi.png',\n            capabilities: [\n              {\n                label: '深度思考',\n                value: 'deep_thinking'\n              },\n              {\n                label: '联网搜索',\n                value: 'web_search'\n              }\n            ],\n            selectedCapability: '',\n            enabled: true,\n            status: 'idle',\n            progressLogs: [],\n            isExpanded: true\n          },\n\n\n          {\n            name: \"秘塔\",\n            avatar: 'https://www.aitool6.com/wp-content/uploads/2023/06/9557d1-2.jpg',\n            capabilities: [\n              { label: \"极速\", value: \"fast\" },\n              { label: \"极速思考\", value: \"fast_thinking\" },\n              { label: \"长思考\", value: \"long_thinking\" },\n            ],\n            selectedCapabilities:\"fast\",\n            enabled: true,\n            status: \"idle\",\n            progressLogs: [],\n            isExpanded: true,\n            isSingleSelect: true  // 添加单选标记\n          },\n\n          {\n            name: \"知乎直答\",\n            avatar: 'https://u3w.com/chatfile/ZHZD.png',\n            capabilities: [\n              {\n                label: \"智能思考\",\n                value: \"smart_thinking\"\n              },\n              {\n                label: \"深度思考\",\n                value: \"deep_thinking\"\n              },\n              {\n                label: \"快速回答\",\n                value: \"fast_answer\"\n              },\n            ],\n            selectedCapability: \"smart_thinking\", // 改为单选，默认智能思考\n            enabled: true,\n            status: 'idle',\n            progressLogs: [],\n            isExpanded: true,\n            isSingleSelect: true, // 设为单选模式\n          },\n          {\n            name: \"百度AI\",\n            avatar: 'https://u3w.com/chatfile/baiduAI.png',\n            capabilities: [\n              { label: \"深度搜索\", value: \"web_search\" }\n            ],\n            selectedCapabilities: [],\n            enabled: true,\n            status: \"idle\",\n            progressLogs: [],\n            isExpanded: true,\n          },\n\n\n\n\t\t\t\t],\n\n\t\t\t\t// 输入和任务状态\n\t\t\t\tpromptInput: '',\n\t\t\t\ttaskStarted: false,\n\t\t\t\tenabledAIs: [],\n\n\t\t\t\t// 可视化\n\t\t\t\tscreenshots: [],\n\t\t\t\tautoPlay: false,\n\n\t\t\t\t// 结果\n\t\t\t\tresults: [],\n\t\t\t\tactiveResultIndex: 0,\n\n\t\t\t\t// 历史记录\n\t\t\t\tchatHistory: [],\n\n\t\t\t\t// 评分\n\t\t\t\tselectedResults: [],\n\t\t\t\tscorePrompt: '请你深度阅读以下几篇公众号文章，从多个维度进行逐项打分，输出评分结果。并在以下各篇文章的基础上博采众长，综合整理一篇更全面的文章。',\n\t\t\tscoreAI: '豆包', // 默认选择豆包作为评分AI\n\t\t\tscorePromptList: [], // 评分提示词模板列表\n\t\t\tselectedScorePrompt: '', // 选中的评分提示词模板名称\n\n\t\t\t\t// 收录计数器\n\t\t\t\tcollectNum: 0,\n\n\t\t\t\t// 媒体投递\n        layoutPrompt: '',\n        layoutAI: '豆包', // 默认选择豆包作为排版AI\n        selectedMedia: 'wechat_layout', // 默认选择公众号\n\n\t\t\t\t// 微头条相关\n\t\t\t\ttthArticleEditVisible: false, // 微头条文章编辑弹窗\n\t\t\t\ttthArticleTitle: '', // 微头条文章标题\n\t\t\t\ttthArticleContent: '', // 微头条文章内容\n\t\t\t\ttthFlowVisible: false, // 微头条发布流程弹窗\n\t\t\t\ttthFlowLogs: [], // 微头条发布流程日志\n\t\t\t\ttthFlowImages: [], // 微头条发布流程图片\n\t\t\t\ttthScoreContent: '', // 智能评分内容\n\n\t\t\t// 媒体列表配置\n\t\t\tmediaList: [\n\t\t\t\t{\n\t\t\t\t\tname: \"wechat_layout\",\n\t\t\t\t\tlabel: \"公众号\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"zhihu_layout\",\n\t\t\t\t\tlabel: \"知乎\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"weitoutiao_layout\",\n\t\t\t\t\tlabel: \"微头条\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"baijiahao_layout\",\n\t\t\t\t\tlabel: \"百家号\",\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t\t// WebSocket\n\t\t\t\tsocketTask: null,\n\t\t\t\treconnectTimer: null,\n\t\t\t\theartbeatTimer: null,\n\t\t\t\treconnectCount: 0,\n\t\t\t\tmaxReconnectCount: 5,\n\t\t\t\tisConnecting: false,\n\t\t\t\tisRefreshing: false, // 防重复刷新标志\n\t\t\t\tscrollIntoView: '',\n\n\t\t\t\t// 弹窗状态\n\t\t\t\thistoryDrawerVisible: false,\n\t\t\t\tscoreModalVisible: false,\n\t\t\t\tlayoutModalVisible: false,\n\t\t\t\tcurrentLayoutResult: null, // 当前要排版的结果\n\n\t\t\t\t// AI登录状态\n\t\t\t\taiLoginStatus: {\n\t\t\t\t\tyuanbao: false,\n\t\t\t\t\tdoubao: false,\n          deepseek: false,\n          tongyi: false,\n          metaso: false,\n          zhzd: false,\n          baidu: false\n\t\t\t\t},\n\t\t\t\taccounts: {\n\t\t\t\t\tyuanbao: '',\n\t\t\t\t\tdoubao: '',\n          deepseek: '',\n          tongyi: '',\n          metaso: '',\n          zhzd: '',\n          baidu: ''\n\t\t\t\t},\n\t\t\t\tisLoading: {\n\t\t\t\t\tyuanbao: true,\n\t\t\t\t\tdoubao: true,\n          deepseek: true,\n          tongyi: true,\n\t\t      metaso: true,\n          zhzd: true,\n          baidu: true\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\tcomputed: {\n\t\t\tcanSend() {\n\t\t\t\t// 检查是否有输入内容\n\t\t\t\tconst hasInput = this.promptInput.trim().length > 0;\n\n\t\t\t\t// 检查是否有可用的AI（既启用又已登录）\n\t\t\t\tconst hasAvailableAI = this.aiList.some(ai => ai.enabled && this.isAiLoginEnabled(ai));\n\n\t\t\t\t// 检查是否正在加载AI状态（如果正在加载，禁用发送按钮）\n\t\t\t\tconst isCheckingStatus = this.isLoading.yuanbao || this.isLoading.doubao || this.isLoading.deepseek || this.isLoading.tongyi || this.isLoading.metaso || this.isLoading.zhzd || this.isLoading.baidu;\n\n\t\t\t\treturn hasInput && hasAvailableAI && !isCheckingStatus;\n\t\t\t},\n\n\t\t\tcanScore() {\n\t\t\t\tconst hasSelected = this.selectedResults.length > 0;\n\t\t\t\tconst hasPrompt = this.scorePrompt.trim().length > 0;\n\t\t\t\tconsole.log('canScore - selectedResults:', this.selectedResults);\n\t\t\t\tconsole.log('canScore - scorePrompt length:', this.scorePrompt.trim().length);\n\t\t\t\tconsole.log('canScore - hasSelected:', hasSelected, 'hasPrompt:', hasPrompt);\n\t\t\t\treturn hasSelected && hasPrompt;\n\t\t\t},\n\n\t\t\tcurrentResult() {\n\t\t\t\treturn this.results[this.activeResultIndex] || null;\n\t\t\t},\n\n\t\t\tgroupedHistory() {\n\t\t\t\tconst groups = {};\n\t\t\t\tconst chatGroups = {};\n\n\t\t\t\t// 首先按chatId分组\n\t\t\t\tthis.chatHistory.forEach(item => {\n\t\t\t\t\tif (!chatGroups[item.chatId]) {\n\t\t\t\t\t\tchatGroups[item.chatId] = [];\n\t\t\t\t\t}\n\t\t\t\t\tchatGroups[item.chatId].push(item);\n\t\t\t\t});\n\n\t\t\t\t// 然后按日期分组，并处理父子关系\n\t\t\t\tObject.values(chatGroups).forEach(chatGroup => {\n\t\t\t\t\t// 按时间排序\n\t\t\t\t\tchatGroup.sort((a, b) => new Date(a.createTime) - new Date(b.createTime));\n\n\t\t\t\t\t// 获取最早的记录作为父级\n\t\t\t\t\tconst parentItem = chatGroup[0];\n\t\t\t\t\tconst date = this.getHistoryDate(parentItem.createTime);\n\n\t\t\t\t\tif (!groups[date]) {\n\t\t\t\t\t\tgroups[date] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\t// 添加父级记录\n\t\t\t\t\tgroups[date].push({\n\t\t\t\t\t\t...parentItem,\n\t\t\t\t\t\tisParent: true,\n\t\t\t\t\t\tisExpanded: this.expandedHistoryItems[parentItem.chatId] || false,\n\t\t\t\t\t\tchildren: chatGroup.slice(1).map(child => ({\n\t\t\t\t\t\t\t...child,\n\t\t\t\t\t\t\tisParent: false\n\t\t\t\t\t\t}))\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\treturn groups;\n\t\t\t},\n\n\t\t\t// 微头条文章内容字符数\n\t\t\ttthArticleContentLength() {\n\t\t\t\treturn this.tthArticleContent ? this.tthArticleContent.length : 0;\n\t\t\t},\n\n\t\t\t// 检查微头条文章内容是否超过2000字\n\t\t\tisTthArticleContentExceeded() {\n\t\t\t\treturn this.tthArticleContentLength > 2000;\n\t\t\t}\n\t\t},\n\t\twatch: {\n\t\t\t// 监听微头条文章内容变化，确保textarea正确显示\n\t\t\ttthArticleContent: {\n\t\t\t\thandler(newVal, oldVal) {\n\t\t\t\t\t// 当内容变化时，确保textarea正确显示\n\t\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\t\tconst textarea = this.$el.querySelector('.score-textarea');\n\t\t\t\t\t\tif (textarea && textarea.value !== newVal) {\n\t\t\t\t\t\t\ttextarea.value = newVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\timmediate: false\n\t\t\t}\n\t\t},\n\t\tasync onLoad() {\n\t\t\t// 获取状态栏高度（小程序环境）\n\t\t\t// #ifdef MP-WEIXIN\n\t\t\tconst windowInfo = wx.getWindowInfo();\n\t\t\tthis.statusBarHeight = windowInfo.statusBarHeight || 0;\n\t\t\t// #endif\n\t\t\t\n\t\t\t// #ifdef H5\n\t\t\tconst systemInfo = uni.getSystemInfoSync();\n\t\t\tthis.statusBarHeight = systemInfo.statusBarHeight || 0;\n\t\t\t// #endif\n\t\t\t\n\t\t\tawait this.initUserInfo();\n\n\t\t\t// 监听企业ID更新事件\n\t\t\tuni.$on('corpIdUpdated', this.handleCorpIdUpdated);\n\n\t\t\t// 检查用户信息是否完整\n\t\t\tif (!this.userId || !this.corpId) {\n\t\t\t\tconsole.log('用户信息不完整，跳转到登录页面');\n\t\t\t\tuni.showModal({\n\t\t\t\t\ttitle: '提示',\n\t\t\t\t\tcontent: '请先登录后再使用',\n\t\t\t\t\tshowCancel: false,\n\t\t\t\t\tconfirmText: '去登录',\n\t\t\t\t\tsuccess: () => {\n\t\t\t\t\t\tuni.navigateTo({\n\t\t\t\t\t\t\turl: '/pages/login/index'\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.initWebSocket();\n\t\t\tthis.loadChatHistory(0); // 加载历史记录\n\t\t\tthis.loadLastChat(); // 加载上次会话\n\t\t\tthis.initEnabledAIs(); // 初始化AI列表\n\t\t\tthis.checkAiLoginStatus(); // 检查AI登录状态\n\t\t},\n\n\t\tonShow() {\n\t\t\t// 页面显示时确保企业ID最新\n\t\t\tthis.ensureLatestCorpId();\n\t\t},\n\n\t\tonUnload() {\n\t\t\t// 移除事件监听\n\t\t\tuni.$off('corpIdUpdated', this.handleCorpIdUpdated);\n\t\t\tthis.closeWebSocket();\n\t\t},\n\n\t\tmethods: {\n\t\t\t// 从result的aiName中提取媒体标签\n\t\t\tgetMediaLabelFromResult(result) {\n\t\t\t\tif (!result || !result.aiName) return '公众号';\n\t\t\t\t// 从 \"智能排版公众号\" 或 \"智能排版知乎\" 中提取媒体名称\n\t\t\t\tconst mediaLabel = result.aiName.substring(4); // 去掉\"智能排版\"\n\t\t\t\treturn mediaLabel || '公众号';\n\t\t\t},\n\t\t\t\n\t\t\t// 处理textarea获得焦点事件\n\t\t\thandleTextareaFocus() {\n\t\t\t\t// 确保textarea内容正确显示\n\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\tconst textarea = this.$el.querySelector('.score-textarea');\n\t\t\t\t\tif (textarea && textarea.value !== this.tthArticleContent) {\n\t\t\t\t\t\ttextarea.value = this.tthArticleContent;\n\t\t\t\t\t\t// 触发input事件确保v-model同步\n\t\t\t\t\t\ttextarea.dispatchEvent(new Event('input', { bubbles: true }));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t// 初始化用户信息\n\t\t\tasync initUserInfo() {\n\t\t\t\t// 从store获取用户信息，兼容缓存方式\n\t\t\t\tthis.userId = storage.get(constant.userId);\n\t\t\t\t// 使用企业ID工具获取最新企业ID\n\t\t\t\ttry {\n\t\t\t\t\tthis.corpId = await getCorpId();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.warn('获取企业ID失败，使用缓存值:', error);\n\t\t\t\t\tthis.corpId = storage.get(constant.corpId);\n\t\t\t\t}\n\n\t\t\t\tthis.chatId = this.generateUUID();\n\n\t\t\t\t// 初始化请求参数\n\t\t\t\tthis.userInfoReq.userId = this.userId;\n\t\t\t\tthis.userInfoReq.corpId = this.corpId;\n\n\t\t\t\tconsole.log('初始化用户信息:', {\n\t\t\t\t\tuserId: this.userId,\n\t\t\t\t\tcorpId: this.corpId\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t// 初始化启用的AI列表\n\t\t\tinitEnabledAIs() {\n\t\t\t\t// 初始化时显示所有AI，不过滤登录状态\n\t\t\t\tthis.enabledAIs = this.aiList.filter(ai => ai.enabled);\n\t\t\t\tconsole.log('初始化AI列表:', this.enabledAIs.map(ai => ai.name));\n\t\t\t},\n\n\t\t\t// 确保企业ID最新\n\t\t\tasync ensureLatestCorpId() {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = await ensureCorpIdOnShow();\n\t\t\t\t\tif (result.corpId !== this.corpId) {\n\t\t\t\t\t\tconsole.log('企业ID已更新:', result.corpId);\n\t\t\t\t\t\tthis.corpId = result.corpId;\n\t\t\t\t\t\tthis.userInfoReq.corpId = this.corpId;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('确保企业ID最新失败:', error);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// 处理企业ID更新事件\n\t\t\thandleCorpIdUpdated(data) {\n\t\t\t\tconst newCorpId = data.corpId;\n\t\t\t\tif (newCorpId && newCorpId !== this.corpId) {\n\t\t\t\t\tconsole.log('小程序接收到企业ID更新事件，更新本地corpId:', newCorpId);\n\t\t\t\t\tthis.corpId = newCorpId;\n\t\t\t\t\tthis.userInfoReq.corpId = newCorpId;\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: `主机ID已自动更新: ${newCorpId}`,\n\t\t\t\t\t\ticon: 'success'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// 生成UUID\n\t\t\tgenerateUUID() {\n\t\t\t\treturn uuidv4();\n\t\t\t},\n\n\t\t\t// 切换区域展开状态\n\t\t\ttoggleSection(section) {\n\t\t\t\tthis.sectionExpanded[section] = !this.sectionExpanded[section];\n\t\t\t},\n\n\t\t\t// 切换AI启用状态\n\t\t\ttoggleAI(ai, event) {\n\t\t\t\t// 检查AI是否已登录\n\t\t\t\tif (!this.isAiLoginEnabled(ai)) {\n\t\t\t\t\tuni.showModal({\n\t\t\t\t\t\ttitle: '提示',\n\t\t\t\t\t\tcontent: `${ai.name}需要先登录，请前往PC端进行登录后再使用`,\n\t\t\t\t\t\tshowCancel: false,\n\t\t\t\t\t\tconfirmText: '知道了'\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tai.enabled = event.detail.value;\n\t\t\t},\n\n\t\t\t// 腾讯元宝模型选择相关方法\n\t\t\tgetModelIndex(ai) {\n\t\t\t\tif (!ai.models || !ai.selectedModel) return 0;\n\t\t\t\treturn ai.models.findIndex(model => model.value === ai.selectedModel);\n\t\t\t},\n\n\t\t\tgetSelectedModelLabel(ai) {\n\t\t\t\tif (!ai.models || !ai.selectedModel) return '请选择模型';\n\t\t\t\tconst model = ai.models.find(model => model.value === ai.selectedModel);\n\t\t\t\treturn model ? model.label : '请选择模型';\n\t\t\t},\n\n\t\t\tonModelChange(ai, event) {\n\t\t\t\tif (!ai.enabled || !this.isAiLoginEnabled(ai)) return;\n\t\t\t\tconst index = event.detail.value;\n\t\t\t\tif (ai.models && ai.models[index]) {\n\t\t\t\t\tai.selectedModel = ai.models[index].value;\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: `已切换到${ai.models[index].label}`,\n\t\t\t\t\t\ticon: 'success',\n\t\t\t\t\t\tduration: 1500\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// 切换AI能力\n\t\t\ttoggleCapability(ai, capabilityValue) {\n\t\t\t\t// 检查AI是否已登录和启用\n\t\t\t\tif (!this.isAiLoginEnabled(ai)) {\n\t\t\t\t\tuni.showModal({\n\t\t\t\t\t\ttitle: '提示',\n\t\t\t\t\t\tcontent: `${ai.name}需要先登录，请前往PC端进行登录后再使用`,\n\t\t\t\t\t\tshowCancel: false,\n\t\t\t\t\t\tconfirmText: '知道了'\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!ai.enabled) return;\n\n        // 单选逻辑（针对秘塔AI）\n        if (ai.isSingleSelect) {\n          // 直接设置为当前选中值，实现单选效果\n          ai.selectedCapabilities = capabilityValue;\n        }\n        // 其他AI保持多选逻辑\n        else {\n          const index = ai.selectedCapabilities.indexOf(capabilityValue);\n          if (index === -1) {\n            ai.selectedCapabilities.push(capabilityValue);\n          } else {\n            ai.selectedCapabilities.splice(index, 1);\n          }\n        }\n\t\t\t},\n      // 通义千问切换能力\n      selectSingleCapability(ai, capabilityValue) {\n        if (!ai.enabled || !this.isAiLoginEnabled(ai)) return;\n\n        if (ai.selectedCapability === capabilityValue) {\n          ai.selectedCapability = '';\n        } else {\n          ai.selectedCapability = capabilityValue;\n        }\n      },\n\n\t\t\t// 发送提示词\n\t\t\tsendPrompt() {\n\t\t\tconsole.log('🚀 [sendPrompt] ========== 开始发送任务 ==========');\n\t\t\tconsole.log('🚀 [sendPrompt] canSend状态:', this.canSend);\n\t\t\t\n\t\t\tif (!this.canSend) {\n\t\t\t\tconsole.warn('⚠️ [sendPrompt] canSend为false，停止发送');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconsole.log('📝 [sendPrompt] 用户输入提示词:', this.promptInput);\n\t\t\tconsole.log('👤 [sendPrompt] 用户ID:', this.userId);\n\t\t\tconsole.log('🏢 [sendPrompt] 企业ID:', this.corpId);\n\n\t\t\t\tthis.screenshots = [];\n\t\t\t\t// 折叠所有区域\n\t\t\t\tthis.sectionExpanded.aiConfig = false;\n\t\t\t\tthis.sectionExpanded.promptInput = false;\n\t\t\t\t// this.sectionExpanded.taskStatus = false;\n\n\t\t\t\tthis.taskStarted = true;\n\t\t\t\tthis.results = []; // 清空之前的结果\n\t\t\tconsole.log('🗑️ [sendPrompt] 清空之前的结果和截图');\n\n\t\t\t\tthis.userInfoReq.roles = '';\n\t\t\t\tthis.userInfoReq.taskId = this.generateUUID();\n\t\t\t\tthis.userInfoReq.userId = this.userId;\n\t\t\t\tthis.userInfoReq.corpId = this.corpId;\n\t\t\t\tthis.userInfoReq.userPrompt = this.promptInput;\n\t\t\tconsole.log('🎫 [sendPrompt] 生成任务ID:', this.userInfoReq.taskId);\n\n\t\t\t\t// 获取启用的AI列表及其状态\n\t\t\t\tthis.enabledAIs = this.aiList.filter(ai => ai.enabled  && this.isAiLoginEnabled(ai));\n\t\t\tconsole.log('🤖 [sendPrompt] 筛选启用的AI数量:', this.enabledAIs.length);\n\t\t\tconsole.log('🤖 [sendPrompt] 启用的AI列表:', this.enabledAIs.map(ai => ai.name).join(', '));\n\n\t\t\t\t// 将所有启用的AI状态设置为运行中\n\t\t\t\tthis.enabledAIs.forEach(ai => {\n\t\t\t\t\tai.status = 'running';\n\t\t\t\tconsole.log(`▶️ [sendPrompt] 设置${ai.name}状态为: running`);\n\t\t\t\t});\n\n\t\t\t\t// 构建角色参数\n\t\t\t\tthis.enabledAIs.forEach(ai => {\n\t\t\t\t\tif (ai.name === '腾讯元宝') {\n\t\t\t\t\t\tif (ai.selectedModel === 'hunyuan') {\n\t\t\t\t\t\t\t// 混元模型\n\t\t\t\t\t\t\tthis.userInfoReq.roles = this.userInfoReq.roles + 'yb-hunyuan-pt,';\n\t\t\t\t\t\t\tif (ai.selectedCapabilities.includes(\"deep_thinking\")) {\n\t\t\t\t\t\t\t\tthis.userInfoReq.roles = this.userInfoReq.roles + 'yb-hunyuan-sdsk,';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (ai.selectedCapabilities.includes(\"web_search\")) {\n\t\t\t\t\t\t\t\tthis.userInfoReq.roles = this.userInfoReq.roles + 'yb-hunyuan-lwss,';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (ai.selectedModel === 'deepseek') {\n\t\t\t\t\t\t\t// DeepSeek模型\n\t\t\t\t\t\t\tthis.userInfoReq.roles = this.userInfoReq.roles + 'yb-deepseek-pt,';\n\t\t\t\t\t\t\tif (ai.selectedCapabilities.includes(\"deep_thinking\")) {\n\t\t\t\t\t\t\t\tthis.userInfoReq.roles = this.userInfoReq.roles + 'yb-deepseek-sdsk,';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (ai.selectedCapabilities.includes(\"web_search\")) {\n\t\t\t\t\t\t\t\tthis.userInfoReq.roles = this.userInfoReq.roles + 'yb-deepseek-lwss,';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n          if (ai.name === 'DeepSeek') {\n            this.userInfoReq.roles = this.userInfoReq.roles + 'deepseek,';\n            if (ai.selectedCapabilities.includes(\"deep_thinking\")) {\n              this.userInfoReq.roles = this.userInfoReq.roles + 'ds-sdsk,';\n            }\n            if (ai.selectedCapabilities.includes(\"web_search\")) {\n              this.userInfoReq.roles = this.userInfoReq.roles + 'ds-lwss,';\n            }\n          }\n\t\t\t\t\tif (ai.name === '豆包') {\n\t\t\t\t\t\tthis.userInfoReq.roles = this.userInfoReq.roles + 'zj-db,';\n\t\t\t\t\t\tif (ai.selectedCapabilities.includes(\"deep_thinking\")) {\n\t\t\t\t\t\t\tthis.userInfoReq.roles = this.userInfoReq.roles + 'zj-db-sdsk,';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n          if (ai.name === '秘塔') {\n            this.userInfoReq.roles = this.userInfoReq.roles + 'mita,';\n            if (ai.selectedCapabilities.includes(\"fast\")) {\n              this.userInfoReq.roles = this.userInfoReq.roles + 'metaso-jisu,';\n            }\n            if (ai.selectedCapabilities.includes(\"fast_thinking\")) {\n              this.userInfoReq.roles = this.userInfoReq.roles + 'metaso-jssk,';\n            }\n            if (ai.selectedCapabilities.includes(\"long_thinking\")) {\n              this.userInfoReq.roles = this.userInfoReq.roles + 'metaso-csk,';\n            }\n          }\n\n          if(ai.name === '通义千问' && ai.enabled){\n            this.userInfoReq.roles = this.userInfoReq.roles + 'ty-qw,';\n            if (ai.selectedCapability === \"deep_thinking\") {\n              this.userInfoReq.roles = this.userInfoReq.roles + 'ty-qw-sdsk,'\n            } else if (ai.selectedCapability === \"web_search\") {\n              this.userInfoReq.roles = this.userInfoReq.roles + 'ty-qw-lwss,';\n            }\n          }\n          if(ai.name === '百度AI' && ai.enabled){\n            if(this.isAiLoginEnabled(ai)){\n              this.userInfoReq.roles = this.userInfoReq.roles + 'baidu-agent,';\n              if (ai.selectedCapabilities.includes(\"web_search\")) {\n                this.userInfoReq.roles = this.userInfoReq.roles + 'baidu-sdss,';\n              }\n            }\n          }\n          if (ai.name === \"知乎直答\") {\n            if (this.isAiLoginEnabled(ai)) {\n              this.userInfoReq.roles = this.userInfoReq.roles + \"zhzd-chat,\";\n              // 使用单选思考模式\n              if (ai.selectedCapability === \"deep_thinking\") {\n                this.userInfoReq.roles = this.userInfoReq.roles + \"zhzd-sdsk,\";\n              } else if (ai.selectedCapability === \"fast_answer\") {\n                this.userInfoReq.roles = this.userInfoReq.roles + \"zhzd-ks,\";\n              } else if (ai.selectedCapability === \"smart_thinking\") {\n                this.userInfoReq.roles = this.userInfoReq.roles + \"zhzd-zn,\";\n              } else {\n                // 默认智能思考\n                this.userInfoReq.roles = this.userInfoReq.roles + \"zhzd-zn,\";\n              }\n            }\n          }\n\n\n\t\t\t\t});\n\n\t\t\tconsole.log('🎯 [sendPrompt] 最终角色参数roles:', this.userInfoReq.roles);\n\t\t\tconsole.log('📦 [sendPrompt] 完整请求参数:', JSON.stringify(this.userInfoReq));\n\n\t\t\t\t// 滚动到任务状态区域\n\t\t\t\tthis.scrollIntoView = 'task-status';\n\n\t\t\t\t//调用后端接口\n\t\t\t\tthis.jsonRpcReqest.id = this.generateUUID();\n\t\t\t\tthis.jsonRpcReqest.method = \"使用F8S\";\n\t\t\t\tthis.jsonRpcReqest.params = this.userInfoReq;\n\t\t\t\n\t\t\tconsole.log('📡 [sendPrompt] 准备发送JSON-RPC请求');\n\t\t\tconsole.log('📡 [sendPrompt] JSON-RPC请求:', JSON.stringify(this.jsonRpcReqest));\n\t\t\t\n\t\t\t\tthis.message(this.jsonRpcReqest);\n\t\t\t\tthis.userInfoReq.isNewChat = false;\n\n\t\t\tconsole.log('✅ [sendPrompt] 任务已提交到后端');\n\t\t\tconsole.log('🚀 [sendPrompt] ========== 任务发送完成 ==========');\n\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '任务已提交',\n\t\t\t\t\ticon: 'success'\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t\t\t// WebSocket相关方法\n\t\tinitWebSocket() {\n\t\t\t// 检查用户信息是否完整\n\t\t\tif (!this.userId || !this.corpId) {\n\t\t\t\tconsole.log('用户信息不完整，跳转到登录页面');\n\t\t\t\tuni.showModal({\n\t\t\t\t\ttitle: '提示',\n\t\t\t\t\tcontent: '请先登录后再使用',\n\t\t\t\t\tshowCancel: false,\n\t\t\t\t\tconfirmText: '去登录',\n\t\t\t\t\tsuccess: () => {\n\t\t\t\t\t\tuni.navigateTo({\n\t\t\t\t\t\t\turl: '/pages/login/index'\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.isConnecting || this.socketTask) {\n\t\t\t\tconsole.log('WebSocket正在连接中或已存在连接，跳过重复连接');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// 先清理可能存在的旧连接和定时器\n\t\t\tthis.closeWebSocket();\n\t\t\t\n\t\t\tthis.isConnecting = true;\n\n\t\t\t// 使用PC端的WebSocket连接方式\n\t\t    const wsUrl = `${process.env.VUE_APP_WS_API || 'wss://u3w.com/cubeServer/websocket?clientId='}mypc-${this.userId}`;\n\t\t\t// const wsUrl = `${process.env.VUE_APP_WS_API || 'ws://127.0.0.1:8081/websocket?clientId='}mypc-${this.userId}`;\n\t\t\tconsole.log('WebSocket URL:', wsUrl);\n\n\t\t\tthis.socketTask = uni.connectSocket({\n\t\t\t\turl: wsUrl,\n\t\t\t\tsuccess: () => {\n\t\t\t\t\tconsole.log('WebSocket连接成功');\n\t\t\t\t},\n\t\t\t\tfail: (err) => {\n\t\t\t\t\tconsole.error('WebSocket连接失败', err);\n\t\t\t\t\tthis.isConnecting = false;\n\t\t\t\t\tthis.handleReconnect();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.socketTask.onOpen(() => {\n\t\t\t\tconsole.log('WebSocket连接已打开');\n\t\t\t\tthis.isConnecting = false;\n\t\t\t\tthis.reconnectCount = 0; // 重置重连次数\n\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '连接成功',\n\t\t\t\t\ticon: 'success',\n\t\t\t\t\tduration: 1000\n\t\t\t\t});\n\n\t\t\t\t// 开始心跳检测\n\t\t\t\tthis.startHeartbeat();\n\t\t\t});\n\n\t\t\tthis.socketTask.onMessage((res) => {\n\t\t\t\tthis.handleWebSocketMessage(res.data);\n\t\t\t});\n\n\t\t\tthis.socketTask.onError((err) => {\n\t\t\t\tconsole.error('WebSocket连接错误', err);\n\t\t\t\tthis.isConnecting = false;\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: 'WebSocket连接错误',\n\t\t\t\t\ticon: 'none'\n\t\t\t\t});\n\t\t\t\tthis.handleReconnect();\n\t\t\t});\n\n\t\t\tthis.socketTask.onClose(() => {\n\t\t\t\tconsole.log('WebSocket连接已关闭');\n\t\t\t\tthis.isConnecting = false;\n\t\t\t\tthis.stopHeartbeat(); // 停止心跳\n\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: 'WebSocket连接已关闭',\n\t\t\t\t\ticon: 'none'\n\t\t\t\t});\n\n\t\t\t\t// 尝试重连\n\t\t\t\tthis.handleReconnect();\n\t\t\t});\n\t\t},\n\n\t\t// 处理重连\n\t\thandleReconnect() {\n\t\t\tif (this.reconnectCount >= this.maxReconnectCount) {\n\t\t\t\tconsole.log('WebSocket重连次数已达上限');\n\t\t\t\tuni.showModal({\n\t\t\t\t\ttitle: '连接失败',\n\t\t\t\t\tcontent: '网络连接不稳定，请检查网络后手动刷新页面',\n\t\t\t\t\tshowCancel: false,\n\t\t\t\t\tconfirmText: '知道了'\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// 如果已经在连接中，不要重复重连\n\t\t\tif (this.isConnecting) {\n\t\t\t\tconsole.log('WebSocket正在连接中，跳过重连');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.reconnectCount++;\n\t\t\tconst delay = Math.min(2000 * Math.pow(2, this.reconnectCount), 30000); // 增加基础延迟到2秒\n\n\t\t\tconsole.log(`WebSocket将在${delay}ms后进行第${this.reconnectCount}次重连`);\n\n\t\t\tthis.reconnectTimer = setTimeout(() => {\n\t\t\t\tconsole.log(`开始第${this.reconnectCount}次重连`);\n\t\t\t\tthis.initWebSocket();\n\t\t\t}, delay);\n\t\t},\n\n\t\t// 开始心跳检测\n\t\tstartHeartbeat() {\n\t\t\tthis.stopHeartbeat(); // 先停止之前的心跳\n\n\t\t\tthis.heartbeatTimer = setInterval(() => {\n\t\t\t\tif (this.socketTask) {\n\t\t\t\t\tthis.sendWebSocketMessage({\n\t\t\t\t\t\ttype: 'HEARTBEAT',\n\t\t\t\t\t\ttimestamp: Date.now()\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, 30000); // 每30秒发送一次心跳\n\t\t},\n\n\t\t// 停止心跳检测\n\t\tstopHeartbeat() {\n\t\t\tif (this.heartbeatTimer) {\n\t\t\t\tclearInterval(this.heartbeatTimer);\n\t\t\t\tthis.heartbeatTimer = null;\n\t\t\t}\n\t\t},\n\n\t\t\tsendWebSocketMessage(data) {\n\t\t\t\tif (this.socketTask) {\n\t\t\t\t\tconsole.log('发送WebSocket消息:', data);\n\t\t\t\t\tthis.socketTask.send({\n\t\t\t\t\t\tdata: JSON.stringify(data)\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('WebSocket未连接，无法发送消息');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// 调用后端message接口\n\t\t\tmessage(data) {\n\t\t\tconsole.log('📞 [message] 调用后端API, 方法:', data.method);\n\t\t\tconsole.log('📞 [message] 请求数据:', JSON.stringify(data));\n\t\t\t\n\t\t\t\tmessage(data).then(res => {\n\t\t\t\tconsole.log('📞 [message] 收到后端响应, code:', res.code);\n\t\t\t\tconsole.log('📞 [message] 响应数据:', JSON.stringify(res));\n\t\t\t\t\n\t\t\t\t\tif (res.code == 201) {\n\t\t\t\t\tconsole.warn('⚠️ [message] 后端返回错误, messages:', res.messages);\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: res.messages,\n\t\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\t\tduration: 1500,\n\t\t\t\t\t\t});\n\t\t\t\t} else if (res.code == 200) {\n\t\t\t\t\tconsole.log('✅ [message] 后端处理成功');\n\t\t\t\t\t}\n\t\t\t}).catch(error => {\n\t\t\t\tconsole.error('❌ [message] 调用后端API失败:', error);\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t\t\tcloseWebSocket() {\n\t\t\t// 清理重连定时器\n\t\t\tif (this.reconnectTimer) {\n\t\t\t\tclearTimeout(this.reconnectTimer);\n\t\t\t\tthis.reconnectTimer = null;\n\t\t\t}\n\n\t\t\t// 停止心跳检测\n\t\t\tthis.stopHeartbeat();\n\n\t\t\t// 关闭WebSocket连接\n\t\t\tif (this.socketTask) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.socketTask.close({\n\t\t\t\t\t\tcode: 1000,\n\t\t\t\t\t\treason: '手动关闭连接'\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log('关闭WebSocket连接时出错:', e);\n\t\t\t\t}\n\t\t\t\tthis.socketTask = null;\n\t\t\t}\n\n\t\t\t// 重置状态\n\t\t\tthis.isConnecting = false;\n\t\t\tthis.reconnectCount = 0;\n\t\t\tthis.isRefreshing = false; // 重置刷新标志\n\t\t},\n\n\t\t\t\t\t// 处理WebSocket消息\n\t\thandleWebSocketMessage(data) {\n\t\t\ttry {\n\t\t\t\tconst datastr = data;\n\t\t\t\tconsole.log('📨 [WebSocket] 收到原始消息, 长度:', datastr.length, '字符');\n\t\t\t\tconsole.log('📨 [WebSocket] 消息前200字符:', datastr.substring(0, 200));\n\t\t\t\t\n\t\t\t\tconst dataObj = JSON.parse(datastr);\n\n\t\t\t\tconsole.log('📨 [WebSocket] 收到消息, 类型:', dataObj.type);\n\t\t\t\tconsole.log('📨 [WebSocket] aiName:', dataObj.aiName);\n\n\t\t\t\t// 忽略心跳响应\n\t\t\t\tif (dataObj.type === 'HEARTBEAT_RESPONSE' || dataObj.type === 'HEARTBEAT') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n        // 处理chatId消息\n        if (dataObj.type === 'RETURN_YBT1_CHATID' && dataObj.chatId) {\n          this.userInfoReq.toneChatId = dataObj.chatId;\n        } else if (dataObj.type === 'RETURN_YBDS_CHATID' && dataObj.chatId) {\n          this.userInfoReq.ybDsChatId = dataObj.chatId;\n        } else if (dataObj.type === 'RETURN_DB_CHATID' && dataObj.chatId) {\n\t\t\t\t\t\tthis.userInfoReq.dbChatId = dataObj.chatId;\n        }\n        // else if (dataObj.type === 'RETURN_TY_CHATID' && dataObj.chatId) {\n        //   this.userInfoReq.tyChatId = dataObj.chatId;\n        // }\n        else if (dataObj.type === \"RETURN_METASO_CHATID\" && dataObj.chatId) {\n          this.userInfoReq.metasoChatId = dataObj.chatId;\n        }\n\n\t\t\t\t// 处理进度日志消息\n\t\t\t\tif (dataObj.type === 'RETURN_PC_TASK_LOG' && dataObj.aiName) {\n\t\t\t\tconsole.log(`📋 [进度日志] AI: ${dataObj.aiName}, 内容: ${dataObj.content}`);\n\t\t\t\t\t\n\t\t\t\t\t// 只处理当前任务的日志消息\n\t\t\t\t\tif (dataObj.taskId && dataObj.taskId !== this.userInfoReq.taskId) {\n\t\t\t\t\t\tconsole.log(`⚠️ [进度日志] 忽略其他任务的日志`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tconst targetAI = this.enabledAIs.find(ai => ai.name === dataObj.aiName);\n\t\t\t\t\tif (targetAI && targetAI.status === 'running') {\n\t\t\t\t\tconsole.log(`✅ [进度日志] 找到目标AI: ${targetAI.name}, 添加进度日志`);\n\t\t\t\t\t\t// 检查是否已存在相同内容的日志，避免重复添加\n\t\t\t\t\t\tconst existingLog = targetAI.progressLogs.find(log => log.content === dataObj.content);\n\t\t\t\t\t\tif (!existingLog) {\n\t\t\t\t\t\t\t// 将新进度添加到数组开头\n\t\t\t\t\t\t\ttargetAI.progressLogs.unshift({\n\t\t\t\t\t\t\t\tcontent: dataObj.content,\n\t\t\t\t\t\t\t\ttimestamp: new Date(),\n\t\t\t\t\t\t\t\tisCompleted: false,\n\t\t\t\t\t\t\t\ttaskId: this.userInfoReq.taskId\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tconsole.log(`📊 [进度日志] ${targetAI.name}当前进度日志数量: ${targetAI.progressLogs.length}`);\n\t\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`⚠️ [进度日志] 未找到AI或AI未在运行: ${dataObj.aiName}`);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// 处理截图消息\n\t\t\t\tif (dataObj.type === 'RETURN_PC_TASK_IMG' && dataObj.url) {\n\t\t\t\t\t// 只处理当前任务的截图\n\t\t\t\t\tif (dataObj.taskId && dataObj.taskId !== this.userInfoReq.taskId) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// 将新的截图添加到数组开头\n\t\t\t\t\tthis.screenshots.unshift(dataObj.url);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// 处理智能评分结果\n\t\t\t\tif (dataObj.type === 'RETURN_WKPF_RES') {\n\t\t\t\t\tconsole.log(\"✅ 收到智能评分结果\", dataObj);\n\t\t\t\t\t\n\t\t\t\t\tconst wkpfAI = this.enabledAIs.find(ai => ai.name === '智能评分');\n\t\t\t\t\tif (wkpfAI) {\n\t\t\t\t\t\twkpfAI.status = 'completed';\n\t\t\t\t\t\tif (wkpfAI.progressLogs.length > 0) {\n\t\t\t\t\t\t\twkpfAI.progressLogs[0].isCompleted = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 添加评分结果到results最前面\n\t\t\t\t\t\tthis.results.unshift({\n\t\t\t\t\t\t\taiName: '智能评分',\n\t\t\t\t\t\t\tcontent: dataObj.draftContent,\n\t\t\t\t\t\t\tshareUrl: dataObj.shareUrl || '',\n\t\t\t\t\t\t\tshareImgUrl: dataObj.shareImgUrl || '',\n\t\t\t\t\t\t\ttimestamp: new Date()\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.activeResultIndex = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 折叠所有区域\n\t\t\t\t\t\tthis.sectionExpanded.aiConfig = false;\n\t\t\t\t\t\tthis.sectionExpanded.promptInput = false;\n\t\t\t\t\t\tthis.sectionExpanded.taskStatus = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 滚动到结果区域\n\t\t\t\t\t\tthis.scrollIntoView = 'results';\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 智能评分完成时，保存历史记录\n\t\t\t\t\t\tthis.saveHistory();\n\t\t\t\t\t\t\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: '智能评分完成',\n\t\t\t\t\t\t\ticon: 'success',\n\t\t\t\t\t\t\tduration: 2000\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconsole.log('✅ 智能评分结果处理完成');\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// 处理智能排版结果\n\t\t\t\tif (dataObj.type === 'RETURN_ZNPB_RES') {\n\t\t\t\t\tconsole.log(\"收到智能排版结果\", dataObj);\n\t\t\t\t\tconsole.log(\"当前 selectedMedia:\", this.selectedMedia);\n\n\t\t\t\t\tconst znpbAI = this.enabledAIs.find(ai => ai.name === '智能排版');\n\t\t\t\t\tif (znpbAI) {\n\t\t\t\t\t\tznpbAI.status = 'completed';\n\t\t\t\t\t\tif (znpbAI.progressLogs.length > 0) {\n\t\t\t\t\t\t\tznpbAI.progressLogs[0].isCompleted = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// 根据selectedMedia获取媒体名称标签\n\t\t\t\t\t\tconst mediaItem = this.mediaList.find(media => media.name === this.selectedMedia);\n\t\t\t\t\t\tconst mediaLabel = mediaItem ? mediaItem.label : '';\n\n\t\t\t\t\t\t// 添加排版结果到结果展示，aiName包含媒体类型\n\t\t\t\t\t\tthis.results.unshift({\n\t\t\t\t\t\t\taiName: '智能排版' + mediaLabel,\n\t\t\t\t\t\t\tcontent: dataObj.draftContent,\n\t\t\t\t\t\t\tshareUrl: dataObj.shareUrl || '',\n\t\t\t\t\t\t\tshareImgUrl: dataObj.shareImgUrl || '',\n\t\t\t\t\t\t\ttimestamp: new Date()\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.activeResultIndex = 0;\n\n\t\t\t\t\t\t// 折叠所有区域\n\t\t\t\t\t\tthis.sectionExpanded.aiConfig = false;\n\t\t\t\t\t\tthis.sectionExpanded.promptInput = false;\n\t\t\t\t\t\tthis.sectionExpanded.taskStatus = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 滚动到结果区域\n\t\t\t\t\t\tthis.scrollIntoView = 'results';\n\n\t\t\t\t\t\t// 智能排版完成时，保存历史记录\n\t\t\t\t\t\tthis.saveHistory();\n\t\t\t\t\t\t\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: `${mediaLabel}排版完成，可手动投递`,\n\t\t\t\t\t\t\ticon: 'success'\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n        // 处理媒体投递任务日志\n\t\tif (dataObj.type === 'RETURN_MEDIA_TASK_LOG') {\n\t\t  console.log(\"收到媒体任务日志\", dataObj);\n          const mediaAI = this.enabledAIs.find(ai => ai.name === '媒体投递');\n          if (mediaAI && mediaAI.status === 'running') { // 只在运行状态时添加日志\n\t\t    // 检查是否已存在相同内容的日志，避免重复添加\n            const existingLog = mediaAI.progressLogs.find(log => log.content === dataObj.content);\n\t\t    if (!existingLog) {\n              // 将新进度添加到数组开头\n              mediaAI.progressLogs.unshift({\n\t\t        content: dataObj.content,\n\t\t        timestamp: new Date(),\n\t\t        isCompleted: false,\n                type: '媒体投递'\n\t\t      });\n\n\t\t      // 强制更新UI\n\t\t      this.$forceUpdate();\n\t\t    }\n\t\t  }\n\t\t  return;\n\t\t}\n\n       // 处理媒体投递结果（包括知乎、百家号等）\n       if (dataObj.type.includes('DELIVERY_RES')) {\n         console.log(\"收到媒体投递完成结果\", dataObj);\n         const mediaAI = this.enabledAIs.find(ai => ai.name === '媒体投递');\n         if (mediaAI) {\n           mediaAI.status = 'completed';\n           if (mediaAI.progressLogs.length > 0) {\n             mediaAI.progressLogs[0].isCompleted = true;\n           }\n         }\n         uni.showToast({\n           title: dataObj.message || '媒体投递完成',\n           icon: 'success'\n         });\n         return;\n       }\n\t\t\n\n        // 处理微头条排版结果\n        if (dataObj.type === 'RETURN_TTH_ZNPB_RES') {\n          // 设置微头条排版AI节点状态为completed\n          const tthZnpbAI = this.enabledAIs.find(ai => ai.name === '微头条排版');\n          if (tthZnpbAI) {\n            tthZnpbAI.status = 'completed';\n            if (tthZnpbAI.progressLogs.length > 0) {\n              tthZnpbAI.progressLogs[0].isCompleted = true;\n            }\n          }\n          this.tthArticleTitle = dataObj.title || '';\n          this.tthArticleContent = dataObj.content || '';\n          this.tthArticleEditVisible = true;\n\n          // 确保textarea正确显示内容\n          this.$nextTick(() => {\n            // 强制更新textarea内容\n            const textarea = this.$el.querySelector('.score-textarea');\n            if (textarea) {\n              textarea.value = this.tthArticleContent;\n              // 触发input事件确保v-model同步\n              textarea.dispatchEvent(new Event('input', { bubbles: true }));\n            }\n          });\n\n          if (this.saveHistory) {\n            this.saveHistory();\n          }\n          uni.showToast({ title: '微头条排版完成，请确认标题和内容', icon: 'success' });\n          return;\n        }\n\n        // 处理微头条发布流程\n        if (dataObj.type === 'RETURN_TTH_FLOW') {\n          if (dataObj.content) {\n            this.tthFlowLogs.push({\n              content: dataObj.content,\n              timestamp: new Date(),\n              type: 'flow'\n            });\n          }\n          if (dataObj.shareImgUrl) {\n            this.tthFlowImages.push(dataObj.shareImgUrl);\n          }\n          if (!this.tthFlowVisible) {\n            this.tthFlowVisible = true;\n          }\n          if (dataObj.content === 'success') {\n            uni.showToast({ title: '发布到微头条成功！', icon: 'success' });\n            this.tthFlowVisible = true;\n          }\n          if (dataObj.content === 'fail') {\n            uni.showToast({ title: '发布到微头条失败！', icon: 'none' });\n            this.tthFlowVisible = false;\n            this.tthArticleEditVisible = true;\n          }\n          return;\n        }\n\n\n\n\t\t\t\t\t// 处理AI登录状态消息\n\t\t\t\tconsole.log('🔐 [状态检查] 检查AI登录状态消息');\n\t\t\t\t\tthis.handleAiStatusMessage(datastr, dataObj);\n\n\t\t\t\t\t// 处理AI结果\n\t\t\t\tconsole.log('🎯 [结果处理] 调用handleAIResult处理AI结果');\n\t\t\t\t\tthis.handleAIResult(dataObj);\n\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('❌ WebSocket消息处理错误:', error);\n\t\t\t\t\tconsole.error('❌ 错误堆栈:', error.stack);\n\t\t\t\t\tconsole.error('❌ 消息长度:', data ? data.length : 0);\n\t\t\t\t\t\n\t\t\t\t\t// 尝试显示错误提示\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '消息处理失败:' + error.message,\n\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\tduration: 3000\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\thandleAiStatusMessage(datastr, dataObj) {\n\t\t\t\t// 处理腾讯元宝登录状态\n\t\t\t\tif (datastr.includes(\"RETURN_YB_STATUS\") && dataObj.status != '') {\n\t\t\t\t\tthis.isLoading.yuanbao = false;\n\t\t\t\t\tif (!datastr.includes(\"false\")) {\n\t\t\t\t\t\tthis.aiLoginStatus.yuanbao = true;\n\t\t\t\t\t\tthis.accounts.yuanbao = dataObj.status;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.aiLoginStatus.yuanbao = false;\n\t\t\t\t\t\t// 禁用相关AI\n\t\t\t\t\t\tthis.disableAIsByLoginStatus('yuanbao');\n\t\t\t\t\t}\n\t\t\t\t\t// 更新AI启用状态\n\t\t\t\t\tthis.updateAiEnabledStatus();\n\t\t\t\t}\n\t\t\t\t// 处理豆包登录状态\n\t\t\t\tif (datastr.includes(\"RETURN_DB_STATUS\") && dataObj.status != '') {\n\t\t\t\t\tthis.isLoading.doubao = false;\n\t\t\t\t\tif (!datastr.includes(\"false\")) {\n\t\t\t\t\t\tthis.aiLoginStatus.doubao = true;\n\t\t\t\t\t\tthis.accounts.doubao = dataObj.status;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.aiLoginStatus.doubao = false;\n\t\t\t\t\t\t// 禁用相关AI\n\t\t\t\t\t\tthis.disableAIsByLoginStatus('doubao');\n\t\t\t\t\t}\n\t\t\t\t\t// 更新AI启用状态\n\t\t\t\t\tthis.updateAiEnabledStatus();\n\t\t\t\t}\n\n\n\n        // 处理秘塔登录状态\n        else if (datastr.includes(\"RETURN_METASO_STATUS\") && dataObj.status != \"\") {\n          this.isLoading.metaso = false;\n          if (!datastr.includes(\"false\")) {\n            this.aiLoginStatus.metaso = true;\n            this.accounts.metaso = dataObj.status;\n          } else {\n            this.aiLoginStatus.metaso = false;\n            // 禁用相关AI\n            this.disableAIsByLoginStatus(\"metaso\");\n          }\n          // 更新AI启用状态\n          this.updateAiEnabledStatus();\n        }\n        // 处理DeepSeek登录状态\n        else if (datastr.includes(\"RETURN_DEEPSEEK_STATUS\")) {\n          console.log(\"收到DeepSeek登录状态消息:\", dataObj);\n          this.isLoading.deepseek = false;\n          if (dataObj.status && dataObj.status !== 'false' && dataObj.status !== '') {\n            this.aiLoginStatus.deepseek = true;\n            this.accounts.deepseek = dataObj.status;\n            console.log(\"DeepSeek登录成功，账号:\", dataObj.status);\n\n            // 查找DeepSeek AI实例\n            const deepseekAI = this.aiList.find(ai => ai.name === 'DeepSeek');\n\n          } else {\n            this.aiLoginStatus.deepseek = false;\n            this.accounts.deepseek = '';\n            console.log(\"DeepSeek未登录\");\n\n            // 如果未登录，确保DeepSeek被禁用\n            const deepseekAI = this.aiList.find(ai => ai.name === 'DeepSeek');\n\n          }\n          // 强制更新UI\n          this.$forceUpdate();\n        }\n        else if (datastr.includes(\"RETURN_TY_STATUS\") && dataObj.status != \"\") {\n          this.isLoading.tongyi = false;\n          if (!datastr.includes(\"false\")) {\n            this.aiLoginStatus.tongyi = true;\n            this.accounts.tongyi = dataObj.status;\n          } else {\n            this.aiLoginStatus.tongyi = false;\n            // 禁用相关AI\n            this.disableAIsByLoginStatus(\"tongyi\");\n          }\n          // 更新AI启用状态\n          this.updateAiEnabledStatus();\n        }\n\n\n        // 处理知乎直答登录状态\n        else if (datastr.includes(\"RETURN_ZHZD_STATUS\") && dataObj.status != \"\") {\n          console.log('收到知乎直答登录状态响应:', datastr, dataObj);\n          this.isLoading.zhzd = false;\n          if (!datastr.includes(\"false\")) {\n            this.aiLoginStatus.zhzd = true;\n            this.accounts.zhzd = dataObj.status;\n          } else {\n            this.aiLoginStatus.zhzd = false;\n            // 禁用相关AI\n            this.disableAIsByLoginStatus(\"zhzd\");\n          }\n          // 更新AI启用状态\n          this.updateAiEnabledStatus();\n        }\n        // 处理百度AI登录状态\n        else if (datastr.includes(\"RETURN_BAIDU_STATUS\") && dataObj.status != \"\") {\n          this.isLoading.baidu = false;\n          if (!datastr.includes(\"false\")) {\n            this.aiLoginStatus.baidu = true;\n            this.accounts.baidu = dataObj.status;\n          } else {\n            this.aiLoginStatus.baidu = false;\n            // 禁用相关AI\n            this.disableAIsByLoginStatus(\"baidu\");\n          }\n          // 更新AI启用状态\n          this.updateAiEnabledStatus();\n        }\n\n\t\t\t},\n\n\t\t\thandleAIResult(dataObj) {\n\t\t\tconsole.log('🔍 [handleAIResult] 开始处理AI结果, 消息类型:', dataObj.type);\n\t\t\tconsole.log('🔍 [handleAIResult] 完整数据对象:', JSON.stringify(dataObj));\n\t\t\tconsole.log('🔍 [handleAIResult] 当前enabledAIs数量:', this.enabledAIs.length);\n\t\t\tconsole.log('🔍 [handleAIResult] enabledAIs列表:', this.enabledAIs.map(ai => `${ai.name}(${ai.status})`).join(', '));\n\t\t\t\n\t\t\t\tlet targetAI = null;\n\n\t\t\t\t// 根据消息类型匹配AI\n\t\t\t\tswitch (dataObj.type) {\n\t\t\t\t\tcase 'RETURN_YBT1_RES':\n\t\t\t\t\tconsole.log('✅ 匹配到腾讯元宝混元消息');\n\t\t\t\t\t\ttargetAI = this.enabledAIs.find(ai => ai.name === '腾讯元宝');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'RETURN_YBDS_RES':\n\t\t\t\t\tconsole.log('✅ 匹配到腾讯元宝DeepSeek消息');\n\t\t\t\t\t\ttargetAI = this.enabledAIs.find(ai => ai.name === '腾讯元宝');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'RETURN_DB_RES':\n\t\t\t\t\tconsole.log('✅ 匹配到豆包消息');\n\t\t\t\t\t\ttargetAI = this.enabledAIs.find(ai => ai.name === '豆包');\n\t\t\t\t\t\tbreak;\n          case 'RETURN_DEEPSEEK_RES':\n\t\t\t\t\tconsole.log('✅ 匹配到DeepSeek消息');\n            targetAI = this.enabledAIs.find(ai => ai.name === 'DeepSeek');\n\t\t\t\t\t// 如果找不到DeepSeek，可能是因为它不在enabledAIs中（兼容处理）\n            if (!targetAI) {\n\t\t\t\t\t\tconsole.warn('⚠️ DeepSeek不在enabledAIs中，动态添加');\n              targetAI = {\n                name: 'DeepSeek',\n                avatar: 'https://u3w.com/chatfile/Deepseek.png',\n                capabilities: [{\n                  label: '深度思考',\n                  value: 'deep_thinking'\n\t\t\t\t\t\t\t}, {\n                    label: '联网搜索',\n                    value: 'web_search'\n                  }],\n                selectedCapabilities: ['deep_thinking', 'web_search'],\n                enabled: true,\n                status: 'running',\n                progressLogs: [{\n                  content: 'DeepSeek响应已接收',\n                  timestamp: new Date(),\n\t\t\t\t\t\t\t\tisCompleted: false\n                }],\n                isExpanded: true\n              };\n\t\t\t\t\t\tthis.enabledAIs.unshift(targetAI);\n            }\n            break;\n\t\t\t\t\tcase 'RETURN_ZNPB_RES':\n\t\t\t\t\t\tconsole.log('✅ 匹配到智能排版结果消息');\n\t\t\t\t\t\t// 智能排版结果，找到\"智能排版\"AI\n\t\t\t\t\t\ttargetAI = this.enabledAIs.find(ai => ai.name === '智能排版');\n\t\t\t\t\t\tif (!targetAI) {\n\t\t\t\t\t\t\tconsole.warn('⚠️ 智能排版AI不在enabledAIs中，动态添加');\n\t\t\t\t\t\t\ttargetAI = {\n\t\t\t\t\t\t\t\tname: '智能排版',\n\t\t\t\t\t\t\t\tavatar: 'https://u3w.com/chatfile/Deepseek.png',\n\t\t\t\t\t\t\t\tcapabilities: [],\n\t\t\t\t\t\t\t\tselectedCapabilities: [],\n\t\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\t\tstatus: 'running',\n\t\t\t\t\t\t\t\tprogressLogs: [{\n\t\t\t\t\t\t\t\t\tcontent: '智能排版响应已接收',\n\t\t\t\t\t\t\t\t\ttimestamp: new Date(),\n\t\t\t\t\t\t\t\t\tisCompleted: false\n\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\tisExpanded: true\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tthis.enabledAIs.unshift(targetAI);\n            }\n            break;\n          case 'RETURN_TY_RES':\n\t\t\t\t\tconsole.log('✅ 匹配到通义千问消息');\n            targetAI = this.enabledAIs.find(ai => ai.name === '通义千问');\n            break;\n\t\t\t\tcase 'RETURN_METASO_RES':\n\t\t\t\t\tconsole.log('✅ 匹配到秘塔消息');\n            targetAI = this.enabledAIs.find((ai) => ai.name === \"秘塔\");\n            break;\n          case 'RETURN_ZHZD_RES':\n\t\t\t\t\tconsole.log('✅ 匹配到知乎直答消息');\n            targetAI = this.enabledAIs.find(ai => ai.name === '知乎直答');\n            break;\n          case 'RETURN_BAIDU_RES':\n\t\t\t\t\tconsole.log('✅ 匹配到百度AI消息');\n            targetAI = this.enabledAIs.find(ai => ai.name === '百度AI');\n            break;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log('⚠️ 未匹配到任何AI类型, 消息类型:', dataObj.type);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\tif (targetAI) {\n\t\t\tconsole.log(`✅ 找到目标AI: ${targetAI.name}, 当前状态: ${targetAI.status}`);\n\t\t\t\n\t\t\t\t// 只处理当前任务的结果\n\t\t\t\tif (dataObj.taskId && dataObj.taskId !== this.userInfoReq.taskId) {\n\t\t\t\t\tconsole.log(`⚠️ 忽略其他任务的消息, 当前taskId: ${this.userInfoReq.taskId}, 消息taskId: ${dataObj.taskId}`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 检查AI是否还在运行状态，避免重复处理\n\t\t\t\tif (targetAI.status !== 'running') {\n\t\t\t\t\tconsole.log(`⚠️ AI状态不是running，跳过处理, 当前状态: ${targetAI.status}`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\n\t\t\t\t// 更新AI状态为已完成\n\t\t\t\ttargetAI.status = 'completed';\n\t\t\tconsole.log(`🔄 更新${targetAI.name}状态为: completed`);\n\n\t\t\t\t// 将最后一条进度消息标记为已完成\n\t\t\t\tif (targetAI.progressLogs.length > 0) {\n\t\t\t\t\ttargetAI.progressLogs[0].isCompleted = true;\n\t\t\t\tconsole.log(`📝 标记${targetAI.name}最后一条进度日志为已完成`);\n\t\t\t\t}\n\n\t\t\t\t// 添加结果到数组开头\n\t\t\t\tconst resultIndex = this.results.findIndex(r => r.aiName === targetAI.name && r.taskId === this.userInfoReq.taskId);\n\t\t\tconsole.log(`🔍 检查results中是否已存在${targetAI.name}的结果, 索引: ${resultIndex}`);\n\t\t\t\n\t\t\t\tif (resultIndex === -1) {\n\t\t\t\tconsole.log(`➕ 添加${targetAI.name}的新结果到results`);\n\t\t\t\t\tthis.results.unshift({\n\t\t\t\t\t\taiName: targetAI.name,\n\t\t\t\t\t\tcontent: dataObj.draftContent,\n\t\t\t\t\t\tshareUrl: dataObj.shareUrl || '',\n\t\t\t\t\t\tshareImgUrl: dataObj.shareImgUrl || '',\n\t\t\t\t\t\ttimestamp: new Date(),\n\t\t\t\t\t\ttaskId: this.userInfoReq.taskId\n\t\t\t\t\t});\n\t\t\t\t\tthis.activeResultIndex = 0;\n\t\t\t\t} else {\n\t\t\t\tconsole.log(`🔄 替换${targetAI.name}的现有结果`);\n\t\t\t\t\tthis.results.splice(resultIndex, 1);\n\t\t\t\t\tthis.results.unshift({\n\t\t\t\t\t\taiName: targetAI.name,\n\t\t\t\t\t\tcontent: dataObj.draftContent,\n\t\t\t\t\t\tshareUrl: dataObj.shareUrl || '',\n\t\t\t\t\t\tshareImgUrl: dataObj.shareImgUrl || '',\n\t\t\t\t\t\ttimestamp: new Date(),\n\t\t\t\t\t\ttaskId: this.userInfoReq.taskId\n\t\t\t\t\t});\n\t\t\t\t\tthis.activeResultIndex = 0;\n\t\t\t\t}\n\n\t\t\tconsole.log(`📊 当前results数量: ${this.results.length}`);\n\t\t\tconsole.log(`📊 results列表:`, this.results.map(r => r.aiName).join(', '));\n\n\t\t\t\t// 折叠所有区域当有结果返回时\n\t\t\t\tthis.sectionExpanded.aiConfig = false;\n\t\t\t\tthis.sectionExpanded.promptInput = false;\n\t\t\t\tthis.sectionExpanded.taskStatus = false;\n\t\t\tconsole.log('📐 折叠所有配置区域');\n\n\t\t\t\t// 滚动到结果区域\n\t\t\t\tthis.scrollIntoView = 'results';\n\t\t\tconsole.log('📜 设置滚动到结果区域');\n\n\t\t\t\t// 保存历史记录\n\t\t\t\tthis.saveHistory();\n\t\t\tconsole.log('💾 保存历史记录');\n\t\t\t\n\t\t\tconsole.log(`✅ ${targetAI.name}结果处理完成`);\n\t\t} else {\n\t\t\tconsole.error(`❌ 未找到对应的AI, 消息类型: ${dataObj.type}`);\n\t\t\tconsole.error('❌ 可能的原因: 1) AI未启用 2) AI名称不匹配 3) enabledAIs为空');\n\t\t\t}\n\t\t},\n\n\t\t\t// 状态相关方法\n\t\t\tgetStatusText(status) {\n\t\t\t\tconst statusMap = {\n\t\t\t\t\t'idle': '等待中',\n\t\t\t\t\t'running': '正在执行',\n\t\t\t\t\t'completed': '已完成',\n\t\t\t\t\t'failed': '执行失败'\n\t\t\t\t};\n\t\t\t\treturn statusMap[status] || '未知状态';\n\t\t\t},\n\n\t\t\tgetStatusIconClass(status) {\n\t\t\t\tconst classMap = {\n\t\t\t\t\t'idle': 'status-idle',\n\t\t\t\t\t'running': 'status-running',\n\t\t\t\t\t'completed': 'status-completed',\n\t\t\t\t\t'failed': 'status-failed'\n\t\t\t\t};\n\t\t\t\treturn classMap[status] || 'status-unknown';\n\t\t\t},\n\n\t\t\tgetStatusEmoji(status) {\n\t\t\t\tconst emojiMap = {\n\t\t\t\t\t'idle': '⏳',\n\t\t\t\t\t'running': '🔄',\n\t\t\t\t\t'completed': '✅',\n\t\t\t\t\t'failed': '❌'\n\t\t\t\t};\n\t\t\t\treturn emojiMap[status] || '❓';\n\t\t\t},\n\n\t\t\t// 切换任务展开状态\n\t\t\ttoggleTaskExpansion(ai) {\n\t\t\t\tai.isExpanded = !ai.isExpanded;\n\t\t\t},\n\n\t\t\t// 切换自动播放\n\t\t\ttoggleAutoPlay(event) {\n\t\t\t\tthis.autoPlay = event.detail.value;\n\t\t\t},\n\n\t\t\t// 预览图片\n\t\t\tpreviewImage(url) {\n\t\t\t\tuni.previewImage({\n\t\t\t\t\tcurrent: url,\n\t\t\t\t\turls: [url]\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t// 结果相关方法\n\t\t\tswitchResultTab(index) {\n\t\t\t\tthis.activeResultIndex = index;\n\t\t\t},\n\n\t\t\trenderMarkdown(text) {\n\t\t\t\ttry {\n          // 对于DeepSeek响应，添加特殊的CSS类\n          if (this.currentResult && this.currentResult.aiName === 'DeepSeek') {\n            // 检查是否已经包含了deepseek-response类\n            if (text && text.includes('class=\"deepseek-response\"')) {\n              return text; // 已经包含了特殊类，直接返回\n            }\n            const renderedHtml = marked(text);\n            return `<div class=\"deepseek-response\">${renderedHtml}</div>`;\n          }\n\t\t\t\t\treturn marked(text);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn text;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tisImageFile(url) {\n\t\t\t\tif (!url) return false;\n\t\t\t\tconst imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp', '.svg'];\n\t\t\t\tconst urlLower = url.toLowerCase();\n\t\t\t\treturn imageExtensions.some(ext => urlLower.includes(ext));\n\t\t\t},\n\n\t\t\t// 判断是否为PDF文件\n\t\t\tisPdfFile(url) {\n\t\t\t\tif (!url) return false;\n\t\t\t\treturn url.toLowerCase().includes('.pdf');\n\t\t\t},\n\n\t\t\tcopyResult(content) {\n\t\t\t\tuni.setClipboardData({\n\t\t\t\t\tdata: content,\n\t\t\t\t\tsuccess: () => {\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: '已复制到剪贴板',\n\t\t\t\t\t\t\ticon: 'success'\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\n\n\n\t\t\t// shareResult(result) {\n\t\t\t// \tuni.share({\n\t\t\t// \t\tprovider: 'weixin',\n\t\t\t// \t\tscene: 'WXSceneSession',\n\t\t\t// \t\ttype: 0,\n\t\t\t// \t\ttitle: `${result.aiName}的执行结果`,\n\t\t\t// \t\tsummary: result.content.substring(0, 100),\n\t\t\t// \t\tsuccess: () => {\n\t\t\t// \t\t\tuni.showToast({\n\t\t\t// \t\t\t\ttitle: '分享成功',\n\t\t\t// \t\t\t\ticon: 'success'\n\t\t\t// \t\t\t});\n\t\t\t// \t\t}\n\t\t\t// \t});\n\t\t\t// },\n\n\t\t\texportResult(result) {\n\t\t\t\t// 小程序环境下的导出功能可以通过分享或复制实现\n\t\t\t\tthis.copyResult(result.content);\n\t\t\t},\n\n\t\t\topenShareUrl(url) {\n\t\t\t\tuni.setClipboardData({\n\t\t\t\t\tdata: url,\n\t\t\t\t\tsuccess: () => {\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: '原链接已复制',\n\t\t\t\t\t\t\ticon: 'success'\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tfail: () => {\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: '复制失败',\n\t\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t// 复制PDF链接\n\t\t\tcopyPdfUrl(url) {\n\t\t\t\tuni.setClipboardData({\n\t\t\t\t\tdata: url,\n\t\t\t\t\tsuccess: () => {\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: 'PDF链接已复制',\n\t\t\t\t\t\t\ticon: 'success'\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tfail: () => {\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: '复制失败',\n\t\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t// 打开PDF文件\n\t\t\topenPdfFile(url) {\n\t\t\t\tuni.showLoading({\n\t\t\t\t\ttitle: '正在下载PDF...'\n\t\t\t\t});\n\n\t\t\t\t// 尝试下载并打开文件\n\t\t\t\tuni.downloadFile({\n\t\t\t\t\turl: url,\n\t\t\t\t\tsuccess: (res) => {\n\t\t\t\t\t\tuni.hideLoading();\n\t\t\t\t\t\tif (res.statusCode === 200) {\n\t\t\t\t\t\t\t// 打开文件\n\t\t\t\t\t\t\tuni.openDocument({\n\t\t\t\t\t\t\t\tfilePath: res.tempFilePath,\n\t\t\t\t\t\t\t\tsuccess: () => {\n\t\t\t\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\t\t\t\ttitle: 'PDF已打开',\n\t\t\t\t\t\t\t\t\t\ticon: 'success'\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfail: () => {\n\t\t\t\t\t\t\t\t\t// 如果无法打开，提示并复制链接\n\t\t\t\t\t\t\t\t\tuni.showModal({\n\t\t\t\t\t\t\t\t\t\ttitle: '提示',\n\t\t\t\t\t\t\t\t\t\tcontent: '无法在当前环境打开PDF文件，已复制链接到剪贴板，请在浏览器中打开',\n\t\t\t\t\t\t\t\t\t\tshowCancel: false,\n\t\t\t\t\t\t\t\t\t\tsuccess: () => {\n\t\t\t\t\t\t\t\t\t\t\tuni.setClipboardData({\n\t\t\t\t\t\t\t\t\t\t\t\tdata: url\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\t\ttitle: '下载失败',\n\t\t\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tfail: () => {\n\t\t\t\t\t\tuni.hideLoading();\n\t\t\t\t\t\t// 下载失败，提示并复制链接\n\t\t\t\t\t\tuni.showModal({\n\t\t\t\t\t\t\ttitle: '提示',\n\t\t\t\t\t\t\tcontent: '下载失败，已复制PDF链接到剪贴板，请在浏览器中打开',\n\t\t\t\t\t\t\tshowCancel: false,\n\t\t\t\t\t\t\tsuccess: () => {\n\t\t\t\t\t\t\t\tuni.setClipboardData({\n\t\t\t\t\t\t\t\t\tdata: url\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t// 历史记录相关方法\n\t\t\tshowHistoryDrawer() {\n\t\t\t\tthis.historyDrawerVisible = true;\n\t\t\t\tthis.loadChatHistory(1);\n\t\t\t},\n\n\t\t\tcloseHistoryDrawer() {\n\t\t\t\tthis.historyDrawerVisible = false;\n\t\t\t},\n\n\t\t\tasync loadChatHistory(isAll) {\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await getChatHistory(this.userId, isAll);\n\t\t\t\t\tif (res.code === 200) {\n\t\t\t\t\t\tthis.chatHistory = res.data || [];\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('加载历史记录失败:', error);\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '加载历史记录失败',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tloadHistoryItem(item) {\n\t\t\t\ttry {\n\t\t\t\t\tconst historyData = JSON.parse(item.data);\n\t\t\t\t\t// 恢复AI选择配置\n\t\t\t\t\tthis.aiList = historyData.aiList || this.aiList;\n\t\t\t\t\t// 恢复提示词输入\n\t\t\t\t\tthis.promptInput = historyData.promptInput || item.userPrompt;\n\t\t\t\t\t// 恢复任务流程\n\t\t\t\t\tthis.enabledAIs = historyData.enabledAIs || [];\n\t\t\t\t\t// 恢复主机可视化\n\t\t\t\t\tthis.screenshots = historyData.screenshots || [];\n\t\t\t\t\t// 恢复执行结果\n\t\t\t\t\tthis.results = historyData.results || [];\n\t\t\t\t\t// 恢复chatId\n\t\t\t\t\tthis.chatId = item.chatId || this.chatId;\n\t\t\t\t\tthis.userInfoReq.toneChatId = item.toneChatId || '';\n\t\t\t\t\tthis.userInfoReq.ybDsChatId = item.ybDsChatId || '';\n\t\t\t\t\tthis.userInfoReq.dbChatId = item.dbChatId || '';\n          // this.userInfoReq.tyChatId = item.tyChatId || '';\n\n          this.userInfoReq.metasoChatId = item.metasoChatId || \"\";\n\n\n          this.userInfoReq.isNewChat = false;\n\n\t\t\t\t\t// 不再根据AI登录状态更新AI启用状态，保持原有选择\n\n\t\t\t\t\t// 展开相关区域\n\t\t\t\t\tthis.sectionExpanded.aiConfig = true;\n\t\t\t\t\tthis.sectionExpanded.promptInput = true;\n\t\t\t\t\tthis.sectionExpanded.taskStatus = true;\n\t\t\t\t\tthis.taskStarted = true;\n\n\t\t\t\t\tthis.closeHistoryDrawer();\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '历史记录加载成功',\n\t\t\t\t\t\ticon: 'success'\n\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('加载历史记录失败:', error);\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '加载失败',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// 加载上次会话\n\t\t\tasync loadLastChat() {\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await getChatHistory(this.userId, 0);\n\t\t\t\t\tif (res.code === 200 && res.data && res.data.length > 0) {\n\t\t\t\t\t\t// 获取最新的会话记录\n\t\t\t\t\t\tconst lastChat = res.data[0];\n\t\t\t\t\t\tthis.loadHistoryItem(lastChat);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('加载上次会话失败:', error);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tasync saveHistory() {\n\t\t\t\tconst historyData = {\n\t\t\t\t\taiList: this.aiList,\n\t\t\t\t\tpromptInput: this.promptInput,\n\t\t\t\t\tenabledAIs: this.enabledAIs,\n\t\t\t\t\tscreenshots: this.screenshots,\n\t\t\t\t\tresults: this.results,\n\t\t\t\t\tchatId: this.chatId,\n\t\t\t\t\ttoneChatId: this.userInfoReq.toneChatId,\n\t\t\t\t\tybDsChatId: this.userInfoReq.ybDsChatId,\n\t\t\t\t\tdbChatId: this.userInfoReq.dbChatId,\n            // tyChatId: this.userInfoReq.tyChatId,\n\n            metasoChatId: this.userInfoReq.metasoChatId,\n\n            baiduChatId:this.userInfoReq.baiduChatId,\n\t\t\t\t\tzhzdChatId: this.userInfoReq.zhzdChatId,\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tawait saveUserChatData({\n\t\t\t\t\t\tuserId: this.userId,\n\t\t\t\t\t\tuserPrompt: this.promptInput,\n\t\t\t\t\t\tdata: JSON.stringify(historyData),\n\t\t\t\t\t\tchatId: this.chatId,\n\t\t\t\t\t\ttoneChatId: this.userInfoReq.toneChatId,\n\t\t\t\t\t\tybDsChatId: this.userInfoReq.ybDsChatId,\n\t\t\t\t\t\tdbChatId: this.userInfoReq.dbChatId,\n            // tyChatId: this.userInfoReq.tyChatId,\n\n            metasoChatId: this.userInfoReq.metasoChatId,\n\n            baiduChatId:this.userInfoReq.baiduChatId,\n\t\t\t\t\t\tzhzdChatId: this.userInfoReq.zhzdChatId,\n\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('保存历史记录失败:', error);\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '保存历史记录失败',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetHistoryDate(timestamp) {\n\t\t\t\ttry {\n\t\t\t\t\tconsole.log('getHistoryDate 输入:', timestamp, typeof timestamp);\n\n\t\t\t\t\tif (!timestamp) {\n\t\t\t\t\t\treturn '未知日期';\n\t\t\t\t\t}\n\n\t\t\t\t\tlet date;\n\n\t\t\t\t\tif (typeof timestamp === 'number') {\n\t\t\t\t\t\tdate = new Date(timestamp);\n\t\t\t\t\t} else if (typeof timestamp === 'string') {\n\t\t\t\t\t\t// 处理 \"2025-6-23 14:53:12\" 这种格式\n\t\t\t\t\t\tconst match = timestamp.match(/(\\d{4})-(\\d{1,2})-(\\d{1,2})\\s+(\\d{1,2}):(\\d{1,2}):(\\d{1,2})/);\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tconst [, year, month, day, hour, minute, second] = match;\n\t\t\t\t\t\t\tdate = new Date(\n\t\t\t\t\t\t\t\tparseInt(year),\n\t\t\t\t\t\t\t\tparseInt(month) - 1,\n\t\t\t\t\t\t\t\tparseInt(day),\n\t\t\t\t\t\t\t\tparseInt(hour),\n\t\t\t\t\t\t\t\tparseInt(minute),\n\t\t\t\t\t\t\t\tparseInt(second)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// 如果正则不匹配，尝试其他方式\n\t\t\t\t\t\t\tconst fixedTimestamp = timestamp.replace(/\\s/g, 'T');\n\t\t\t\t\t\t\tdate = new Date(fixedTimestamp);\n\n\t\t\t\t\t\t\tif (isNaN(date.getTime())) {\n\t\t\t\t\t\t\t\tdate = new Date(timestamp);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdate = new Date(timestamp);\n\t\t\t\t\t}\n\n\t\t\t\t\tconsole.log('getHistoryDate 解析结果:', date, date.getTime());\n\n\t\t\t\t\tif (isNaN(date.getTime())) {\n\t\t\t\t\t\treturn '未知日期';\n\t\t\t\t\t}\n\n\t\t\t\t\tconst today = new Date();\n\t\t\t\t\tconst yesterday = new Date(today);\n\t\t\t\t\tyesterday.setDate(yesterday.getDate() - 1);\n\n\t\t\t\t\tif (date.toDateString() === today.toDateString()) {\n\t\t\t\t\t\treturn '今天';\n\t\t\t\t\t} else if (date.toDateString() === yesterday.toDateString()) {\n\t\t\t\t\t\treturn '昨天';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn date.toLocaleDateString('zh-CN');\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('格式化日期错误:', error, timestamp);\n\t\t\t\t\treturn '未知日期';\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// 格式化历史记录时间\n\t\t\tformatHistoryTime(timestamp) {\n\t\t\t\ttry {\n\t\t\t\t\tconsole.log('formatHistoryTime 输入:', timestamp, typeof timestamp);\n\n\t\t\t\t\tlet date;\n\n\t\t\t\t\tif (!timestamp) {\n\t\t\t\t\t\treturn '时间未知';\n\t\t\t\t\t}\n\n\t\t\t\t\t// 如果是数字，直接创建Date对象\n\t\t\t\t\tif (typeof timestamp === 'number') {\n\t\t\t\t\t\tdate = new Date(timestamp);\n\t\t\t\t\t} else if (typeof timestamp === 'string') {\n\t\t\t\t\t\t// 处理ISO 8601格式：2025-06-25T07:18:54.110Z\n\t\t\t\t\t\tif (timestamp.includes('T') && (timestamp.includes('Z') || timestamp.includes('+'))) {\n\t\t\t\t\t\t\tdate = new Date(timestamp);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 处理 \"2025-6-26 08:46:26\" 这种格式\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tconst match = timestamp.match(/(\\d{4})-(\\d{1,2})-(\\d{1,2})\\s+(\\d{1,2}):(\\d{1,2}):(\\d{1,2})/);\n\t\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\t\tconst [, year, month, day, hour, minute, second] = match;\n\t\t\t\t\t\t\t\t// 注意：Date构造函数的month参数是0-11，所以要减1\n\t\t\t\t\t\t\t\tdate = new Date(\n\t\t\t\t\t\t\t\t\tparseInt(year),\n\t\t\t\t\t\t\t\t\tparseInt(month) - 1,\n\t\t\t\t\t\t\t\t\tparseInt(day),\n\t\t\t\t\t\t\t\t\tparseInt(hour),\n\t\t\t\t\t\t\t\t\tparseInt(minute),\n\t\t\t\t\t\t\t\t\tparseInt(second)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// 如果正则不匹配，尝试其他方式\n\t\t\t\t\t\t\t\tconst fixedTimestamp = timestamp.replace(/\\s/g, 'T');\n\t\t\t\t\t\t\t\tdate = new Date(fixedTimestamp);\n\n\t\t\t\t\t\t\t\tif (isNaN(date.getTime())) {\n\t\t\t\t\t\t\t\t\tdate = new Date(timestamp);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (timestamp instanceof Date) {\n\t\t\t\t\t\tdate = timestamp;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdate = new Date(timestamp);\n\t\t\t\t\t}\n\n\t\t\t\t\tconsole.log('formatHistoryTime 解析结果:', date, date.getTime());\n\n\t\t\t\t\tif (isNaN(date.getTime())) {\n\t\t\t\t\t\treturn '时间未知';\n\t\t\t\t\t}\n\n\t\t\t\t\t// 使用更简洁的时间格式，避免显示时区信息\n\t\t\t\t\tconst hour = date.getHours().toString().padStart(2, '0');\n\t\t\t\t\tconst minute = date.getMinutes().toString().padStart(2, '0');\n\n\t\t\t\t\tconst timeString = `${hour}:${minute}`;\n\n\t\t\t\t\tconsole.log('formatHistoryTime 输出:', timeString);\n\t\t\t\t\treturn timeString;\n\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('格式化时间错误:', error, timestamp);\n\t\t\t\t\treturn '时间未知';\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// 修改折叠切换方法\n\t\t\ttoggleHistoryExpansion(item) {\n\t\t\t\tthis.expandedHistoryItems[item.chatId] = !this.expandedHistoryItems[item.chatId];\n\t\t\t\tthis.$forceUpdate(); // 强制更新视图\n\t\t\t},\n\n\t\t\t// 智能评分相关方法\n\t\tasync showScoreModal() {\n\t\t\t\tthis.selectedResults = [];\n\t\t\t\tthis.scoreModalVisible = true;\n\t\t\t\n\t\t\t// 加载评分提示词模板列表\n\t\t\ttry {\n\t\t\t\tconst { getAllScorePrompt } = require('@/api/wechat/aigc.js');\n\t\t\t\tconst response = await getAllScorePrompt();\n\t\t\t\tif (response.code === 200) {\n\t\t\t\t\tthis.scorePromptList = response.data || [];\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('加载评分提示词模板失败:', error);\n\t\t\t\t// 失败也不影响使用，用户可以手动输入\n\t\t\t}\n\t\t\t},\n\n\t\t\tcloseScoreModal() {\n\t\t\t\tthis.scoreModalVisible = false;\n\t\t\t},\n\t\t\n\t\t// 获取当前选中的评分模板索引\n\t\tgetScorePromptIndex() {\n\t\t\tif (!this.selectedScorePrompt) return 0;\n\t\t\tconst index = this.scorePromptList.findIndex(prompt => prompt.name === this.selectedScorePrompt);\n\t\t\treturn index === -1 ? 0 : index;\n\t\t},\n\t\t\n\t\t// 评分模板选择变化\n\t\tonScorePromptChange(event) {\n\t\t\tconst index = event.detail.value;\n\t\t\tif (this.scorePromptList[index]) {\n\t\t\t\tthis.selectedScorePrompt = this.scorePromptList[index].name;\n\t\t\t\tthis.scorePrompt = this.scorePromptList[index].prompt;\n\t\t\t}\n\t\t\t},\n\n\t\t\t// 媒体投递相关方法\n\t\t\tshowLayoutModal() {\n\t\t\t\tif (!this.currentResult) {\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '没有可投递的内容',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconsole.log(\"showLayoutModal\", this.currentResult);\n\t\t\t\t// 深度拷贝当前结果，避免引用被修改\n\t\t\t\tthis.currentLayoutResult = {\n\t\t\t\t\taiName: this.currentResult.aiName,\n\t\t\t\t\tcontent: this.currentResult.content,\n\t\t\t\t\tshareUrl: this.currentResult.shareUrl,\n\t\t\t\t\tshareImgUrl: this.currentResult.shareImgUrl,\n\t\t\t\t\ttimestamp: this.currentResult.timestamp\n\t\t\t\t};\n\n        // 默认选择公众号\n        this.selectedMedia = 'wechat_layout';\n        // 设置layoutPrompt为当前结果内容（参考网页端逻辑）\n        this.layoutPrompt = this.currentLayoutResult.content;\n        this.layoutModalVisible = true;\n      },\n      // 选择排版AI\n      selectLayoutAI(ai) {\n        this.layoutAI = ai;\n        console.log('选择排版AI:', ai);\n      },\n      \n      // 选择媒体\n      selectMedia(media) {\n        this.selectedMedia = media;\n        console.log('选择媒体:', media);\n\t\t\t},\n\n\t\t\tcloseLayoutModal() {\n\t\t\t\tthis.layoutModalVisible = false;\n\t\t\t},\n\n      handleLayout() {\n        if (!this.currentLayoutResult) return;\n\n        this.closeLayoutModal();\n\n        // 根据选择的媒体创建排版任务\n        if (this.selectedMedia === 'wechat_layout') {\n        this.createWechatLayoutTask();\n        } else if (this.selectedMedia === 'zhihu_layout') {\n          this.createZhihuLayoutTask();\n        }\n      },\n\n      // 创建知乎排版任务\n      createZhihuLayoutTask() {\n        // 构建知乎排版请求\n        const layoutRequest = {\n          jsonrpc: '2.0',\n          id: this.generateUUID(),\n          method: 'AI排版',\n          params: {\n            taskId: this.generateUUID(),\n            userId: this.userId,\n            corpId: this.corpId,\n            userPrompt: this.currentLayoutResult.content,\n            roles: '',\n            selectedMedia: 'zhihu_layout'\n          }\n        };\n\n        // 根据选择的AI设置roles参数\n        const selectedAI = this.aiList.find(ai => ai.name === this.layoutAI);\n        if (selectedAI) {\n          if (selectedAI.name === '豆包') {\n            layoutRequest.params.roles = 'zj-db,';\n            if (selectedAI.selectedCapabilities.includes('deep_thinking')) {\n              layoutRequest.params.roles += 'zj-db-sdsk,';\n            }\n          } else if (selectedAI.name === 'DeepSeek') {\n            layoutRequest.params.roles = 'deepseek,';\n            if (selectedAI.selectedCapabilities.includes('deep_thinking')) {\n              layoutRequest.params.roles += 'ds-sdsk,';\n            }\n            if (selectedAI.selectedCapabilities.includes('web_search')) {\n              layoutRequest.params.roles += 'ds-lwss,';\n            }\n          }\n        }\n\n        // 发送排版请求\n        console.log(\"知乎排版参数\", layoutRequest);\n        this.message(layoutRequest);\n\n        // 创建智能排版AI节点\n        const znpbAI = {\n          name: '智能排版',\n          avatar: selectedAI ? selectedAI.avatar : 'https://u3w.com/chatfile/%E8%B1%86%E5%8C%85.png',\n          capabilities: [],\n          selectedCapabilities: [],\n          enabled: true,\n          status: 'running',\n          progressLogs: [\n            {\n              content: '知乎排版任务已提交，正在排版...',\n              timestamp: new Date(),\n              isCompleted: false,\n              type: '智能排版'\n            }\n          ],\n          isExpanded: true\n        };\n\n        this.addOrUpdateTaskAI(znpbAI, '智能排版');\n\n        uni.showToast({\n          title: '知乎排版任务已提交',\n          icon: 'success'\n        });\n      },\n\n\t  // 创建百家号投递任务\n\t  createBaijiahaoDeliveryTask() {\n\t    // 组合完整的提示词：数据库提示词 + 原文内容\n\t    const fullPrompt = this.layoutPrompt + '\\n\\n' + this.currentLayoutResult.content;\n\n\t    // 构建百家号投递请求\n\t    const baijiahaoRequest = {\n\t      jsonrpc: '2.0',\n\t      id: this.generateUUID(),\n\t      method: '投递到百家号',\n\t      params: {\n\t        taskId: this.generateUUID(),\n\t        userId: this.userId,\n\t        corpId: this.corpId,\n\t        userPrompt: fullPrompt,\n\t        aiName: this.currentLayoutResult.aiName,\n\t        content: this.currentLayoutResult.content\n\t      }\n\t    };\n\n\t    console.log(\"百家号投递参数\", baijiahaoRequest);\n\t    this.message(baijiahaoRequest);\n\n\t    // 创建投递到百家号任务节点\n\t    const baijiahaoAI = {\n\t      name: '投递到百家号',\n\t      avatar: 'https://my-image-hosting.oss-cn-beijing.aliyuncs.com/baojiahao.png',\n\t      capabilities: [],\n\t      selectedCapabilities: [],\n\t      enabled: true,\n\t      status: 'running',\n\t      progressLogs: [\n\t        {\n\t          content: '投递到百家号任务已提交，正在处理...',\n\t          timestamp: new Date(),\n\t          isCompleted: false,\n\t          type: '投递到百家号'\n\t        }\n\t      ],\n\t      isExpanded: true\n\t    };\n\n\t    this.addOrUpdateTaskAI(baijiahaoAI, '投递到百家号');\n\n\t    uni.showToast({\n\t      title: '百家号投递任务已提交',\n\t      icon: 'success'\n\t    });\n\t  },\n\t  \n\n\n\n      // 创建微头条排版任务\n      createToutiaoLayoutTask() {\n        // 组合完整的提示词：数据库提示词 + 原文内容\n        const fullPrompt = this.layoutPrompt + '\\n\\n' + this.currentLayoutResult.content;\n\n        // 构建微头条排版请求\n        const layoutRequest = {\n          jsonrpc: '2.0',\n          id: this.generateUUID(),\n          method: '微头条排版',\n          params: {\n            taskId: this.generateUUID(),\n            userId: this.userId,\n            corpId: this.corpId,\n            userPrompt: fullPrompt,\n            roles: ''\n          }\n        };\n\n        console.log(\"微头条排版参数\", layoutRequest);\n        this.message(layoutRequest);\n\n        // 创建微头条排版AI节点\n        const tthZnpbAI = {\n          name: '微头条排版',\n          avatar: 'https://u3w.com/chatfile/TouTiao.png',\n          capabilities: [],\n          selectedCapabilities: [],\n          enabled: true,\n          status: 'running',\n          progressLogs: [\n            {\n              content: '微头条排版任务已提交，正在排版...',\n              timestamp: new Date(),\n              isCompleted: false,\n              type: '微头条排版'\n            }\n          ],\n          isExpanded: true\n        };\n\n        this.addOrUpdateTaskAI(tthZnpbAI, '微头条排版');\n\n        uni.showToast({\n          title: '微头条排版任务已提交',\n          icon: 'success'\n        });\n      },\n\n      // 创建公众号排版任务（参考web端实现）\n        createWechatLayoutTask() {\n          // 构建智能排版请求\n\t\t\t\tconst layoutRequest = {\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.generateUUID(),\n\t\t\t\t\tmethod: 'AI排版',\n\t\t\t\t\tparams: {\n\t\t\t\t\t\ttaskId: this.generateUUID(),\n\t\t\t\t\t\tuserId: this.userId,\n\t\t\t\t\t\tcorpId: this.corpId,\n\t\t\t\t\t\tuserPrompt: this.currentLayoutResult.content,\n\t\t\t\t\t\troles: '',\n\t\t\t\t\t\tselectedMedia: 'wechat_layout'\n\t\t\t\t\t}\n\t\t\t\t};\n\n        // 根据选择的AI设置roles（参考web端逻辑）\n        const selectedAI = this.aiList.find(ai => ai.name === this.layoutAI);\n        if (selectedAI) {\n          if (selectedAI.name === '豆包') {\n            layoutRequest.params.roles = 'zj-db,';\n            if (selectedAI.selectedCapabilities.includes('deep_thinking')) {\n              layoutRequest.params.roles += 'zj-db-sdsk,';\n            }\n          } else if (selectedAI.name === 'DeepSeek') {\n            layoutRequest.params.roles = 'deepseek,';\n            if (selectedAI.selectedCapabilities.includes('deep_thinking')) {\n              layoutRequest.params.roles += 'ds-sdsk,';\n            }\n            if (selectedAI.selectedCapabilities.includes('web_search')) {\n              layoutRequest.params.roles += 'ds-lwss,';\n            }\n          }\n        }\n\n\t\t\t\t// 发送排版请求\n\t\t\t\tconsole.log(\"公众号排版参数\", layoutRequest);\n\t\t\t\tthis.message(layoutRequest);\n\n\t\t\t\t// 创建智能排版AI节点\n\t\t\t\tconst znpbAI = {\n\t\t\t\t\tname: '智能排版',\n\t\t\t\t\tavatar: selectedAI ? selectedAI.avatar : 'https://u3w.com/chatfile/%E8%B1%86%E5%8C%85.png',\n\t\t\t\t\tcapabilities: [],\n\t\t\t\t\tselectedCapabilities: [],\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tstatus: 'running',\n\t\t\t\t\tprogressLogs: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontent: '公众号排版任务已提交，正在排版...',\n\t\t\t\t\t\t\ttimestamp: new Date(),\n\t\t\t\t\t\t\tisCompleted: false,\n\t\t\t\t\t\t\ttype: '智能排版'\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tisExpanded: true\n\t\t\t\t};\n          this.addOrUpdateTaskAI(znpbAI, '智能排版');\n\n          uni.showToast({\n            title: '公众号排版请求已发送，请等待结果',\n            icon: 'success'\n          });\n        },\n\n        // 添加或更新任务AI\n        addOrUpdateTaskAI(aiNode, taskName) {\n          const existIndex = this.enabledAIs.findIndex(ai => ai.name === taskName);\n          if (existIndex === -1) {\n            // 如果不存在，添加到数组开头\n            this.enabledAIs.unshift(aiNode);\n          } else {\n            // 如果已存在，先移除旧的，再将新的添加到开头\n            this.enabledAIs.splice(existIndex, 1);\n            this.enabledAIs.unshift(aiNode);\n          }\n          this.$forceUpdate();\n        },\n\n\n\t\t\t// 直接投递已排版的内容到公众号\n\t\t\tasync handleDirectPushToWechat(result) {\n\t\t\t\ttry {\n\t\t\t\t\tconsole.log(\"handleDirectPushToWechat 开始执行\", result);\n\n\t\t\t\t\t// 验证内容是否为空\n\t\t\t\t\tif (!result.content || result.content.trim() === '') {\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: '投递内容为空，请先进行AI排版生成内容',\n\t\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// 提取媒体类型：从 aiName 中去掉 \"智能排版\" 四个字\n\t\t\t\t\tconst mediaLabel = result.aiName.substring(4); // 去掉\"智能排版\"\n\t\t\t\t\tconst mediaItem = this.mediaList.find(media => media.label === mediaLabel);\n\t\t\t\t\tconst mediaName = mediaItem ? mediaItem.name : '';\n\n\t\t\t\t\tconsole.log(\"提取的媒体类型:\", mediaLabel, mediaName);\n\n\t\t\t\t\t// 根据媒体类型进行不同的处理\n\t\t\t\t\tif (mediaName.includes('wechat')) {\n\t\t\t\t\t\t// 公众号投递：直接调用API\n\t\t\t\t\tuni.showLoading({\n\t\t\t\t\t\t\ttitle: '正在投递到公众号...'\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.collectNum++;\n\n\t\t\t\t\tconst params = {\n\t\t\t\t\t\tcontentText: result.content,\n\t\t\t\t\t\tuserId: this.userId,\n\t\t\t\t\t\tshareUrl: result.shareUrl || '',\n\t\t\t\t\t\taiName: result.aiName || '',\n\t\t\t\t\t\tnum: this.collectNum\n\t\t\t\t\t};\n\n\t\t\t\t\t\tconsole.log(\"公众号投递参数\", params);\n\n\t\t\t\tconst res = await pushAutoOffice(params);\n\n\t\t\t\tuni.hideLoading();\n\n\t\t\t\tif (res.code === 200) {\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\t\ttitle: '投递到公众号成功',\n\t\t\t\t\t\ticon: 'success'\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: res.message || '投递失败',\n\t\t\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (mediaName.includes('zhihu')) {\n\t\t\t\t\t\t// 知乎投递：通过WebSocket发送投递请求\n\t\t\t\t\t\tuni.showLoading({\n\t\t\t\t\t\t\ttitle: '正在投递到知乎...'\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst mediaRequest = {\n\t\t\t\t\t\t\tjsonrpc: \"2.0\",\n\t\t\t\t\t\t\tid: this.generateUUID(),\n\t\t\t\t\t\t\tmethod: \"媒体投递\",\n\t\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\t\ttaskId: this.generateUUID(),\n\t\t\t\t\t\t\t\tuserId: this.userId,\n\t\t\t\t\t\t\t\tcorpId: this.corpId,\n\t\t\t\t\t\t\t\taiName: result.aiName,\n\t\t\t\t\t\t\t\tuserPrompt: result.content,\n\t\t\t\t\t\t\t\tselectedMedia: \"zhihu_layout\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconsole.log(\"知乎投递参数\", mediaRequest);\n\n\t\t\t\t\t\tthis.message(mediaRequest);\n\n\t\t\t\t\t\t// 创建媒体投递任务节点\n\t\t\t\t\t\tconst mediaDeliveryAI = {\n\t\t\t\t\t\t\tname: '媒体投递',\n\t\t\t\t\t\t\tavatar: 'https://u3w.com/chatfile/%E8%B1%86%E5%8C%85.png',\n\t\t\t\t\t\t\tcapabilities: [],\n\t\t\t\t\t\t\tselectedCapabilities: [],\n\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\tstatus: 'running',\n\t\t\t\t\t\t\tprogressLogs: [{\n\t\t\t\t\t\t\t\tcontent: '知乎投递任务已提交，正在投递...',\n\t\t\t\t\t\t\t\ttimestamp: new Date(),\n\t\t\t\t\t\t\t\tisCompleted: false,\n\t\t\t\t\t\t\t\ttype: '媒体投递'\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\tisExpanded: true\n\t\t\t\t\t\t};\n\n\t\t\t\t\t// 添加或更新媒体投递任务\n\t\t\t\t\tthis.addOrUpdateTaskAI(mediaDeliveryAI, '媒体投递');\n\n\t\t\t\t\tuni.hideLoading();\n\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '媒体投递请求已发送，请等待结果',\n\t\t\t\t\t\ticon: 'success'\n\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: '不支持的媒体类型',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tuni.hideLoading();\n\t\t\t\t\tconsole.error('投递失败:', error);\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '投递失败',\n\t\t\t\t\ticon: 'none'\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t// 推送到公众号\n\t\tasync handlePushToWechat(contentText) {\n\t\t\t\ttry {\n\t\t\t\t\tconsole.log(\"handlePushToWechat 开始执行\", this.currentLayoutResult);\n\n\t\t\t\t\tif (!this.currentLayoutResult) {\n\t\t\t\t\t\tconsole.error(\"currentLayoutResult 为空，无法投递\");\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: '投递失败：缺少原始结果信息',\n\t\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tuni.showLoading({\n\t\t\t\t\t\ttitle: '正在投递...'\n\t\t\t\t\t});\n\n\t\t\t\t\t// 自增计数器\n\t\t\t\t\tthis.collectNum++;\n\n\t\t\t\t\tconst params = {\n\t\t\t\t\t\tcontentText: contentText,\n\t\t\t\t\t\tuserId: this.userId,\n\t\t\t\t\t\tshareUrl: this.currentLayoutResult.shareUrl || '',\n\t\t\t\t\t\taiName: this.currentLayoutResult.aiName || '',\n\t\t\t\t\t\tnum: this.collectNum\n\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tconsole.log(\"投递参数\", params);\n\n\t\t\tconst res = await pushAutoOffice(params);\n\n\t\t\tuni.hideLoading();\n\n\t\t\tif (res.code === 200) {\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '投递成功',\n\t\t\t\t\ticon: 'success'\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: res.message || '投递失败',\n\t\t\t\t\ticon: 'none'\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tuni.hideLoading();\n\t\t\tconsole.error('投递到公众号失败:', error);\n\t\t\tuni.showToast({\n\t\t\t\ttitle: '投递失败',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\ttoggleResultSelection(event) {\n\t\t\t\tconst values = event.detail.value;\n\t\t\t\tconsole.log('toggleResultSelection - 选中的values:', values);\n\t\t\t\tconsole.log('toggleResultSelection - 当前scorePrompt:', this.scorePrompt.trim());\n\t\t\t\tthis.selectedResults = values;\n\t\t\t\tconsole.log('toggleResultSelection - 更新后的selectedResults:', this.selectedResults);\n\t\t\t\tconsole.log('toggleResultSelection - canScore状态:', this.canScore);\n\t\t\t},\n\n\t\tasync handleScore() {\n\t\t\t\tif (!this.canScore) return;\n\n\t\t\ttry {\n\t\t\t\t// 调用getScoreWord API获取评分后缀\n\t\t\t\tconst { getScoreWord } = require('@/api/wechat/aigc.js');\n\t\t\t\tconst response = await getScoreWord();\n\t\t\t\tconst scoreSuffix = response.code === 200 ? response.data : '初稿：';\n\n\t\t\t\t// 获取选中的结果内容并按照指定格式拼接\n\t\t\t\tconst selectedContents = this.results\n\t\t\t\t\t.filter(result => this.selectedResults.includes(result.aiName))\n\t\t\t\t\t.map(result => {\n\t\t\t\t\t\t// 将HTML内容转换为纯文本（小程序版本简化处理）\n\t\t\t\t\t\tconst plainContent = result.content.replace(/<[^>]*>/g, '');\n\t\t\t\t\t\t\treturn `${result.aiName}${scoreSuffix}${plainContent}\\n`;\n\t\t\t\t\t})\n\t\t\t\t\t.join('\\n');\n\n\t\t\t\t// 构建完整的评分提示内容\n\t\t\t\tconst fullPrompt = `${this.scorePrompt}\\n${selectedContents}`;\n\n\t\t\t\t// 构建评分请求\n\t\t\t\tconst scoreRequest = {\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.generateUUID(),\n\t\t\t\t\tmethod: 'AI评分',\n\t\t\t\t\tparams: {\n\t\t\t\t\t\ttaskId: this.generateUUID(),\n\t\t\t\t\t\tuserId: this.userId,\n\t\t\t\t\t\tcorpId: this.corpId,\n\t\t\t\t\t\tuserPrompt: fullPrompt,\n\t\t\t\t\t\t\troles: ''\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// 根据选择的AI设置roles参数\n\t\t\t\t\tconst selectedAI = this.aiList.find(ai => ai.name === this.scoreAI);\n\t\t\t\t\tif (selectedAI) {\n\t\t\t\t\t\tif (selectedAI.name === '豆包') {\n\t\t\t\t\t\t\tscoreRequest.params.roles = 'zj-db,';\n\t\t\t\t\t\t\tif (selectedAI.selectedCapabilities.includes('deep_thinking')) {\n\t\t\t\t\t\t\t\tscoreRequest.params.roles += 'zj-db-sdsk,';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (selectedAI.name === 'DeepSeek') {\n\t\t\t\t\t\t\tscoreRequest.params.roles = 'deepseek,';\n\t\t\t\t\t\t\tif (selectedAI.selectedCapabilities.includes('deep_thinking')) {\n\t\t\t\t\t\t\t\tscoreRequest.params.roles += 'ds-sdsk,';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (selectedAI.selectedCapabilities.includes('web_search')) {\n\t\t\t\t\t\t\t\tscoreRequest.params.roles += 'ds-lwss,';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// 发送评分请求\n\t\t\t\t\tconsole.log(\"评分参数\", scoreRequest);\n\t\t\t\tthis.message(scoreRequest);\n\t\t\t\tthis.closeScoreModal();\n\n\t\t\t\t// 创建智能评分AI节点\n\t\t\t\tconst wkpfAI = {\n\t\t\t\t\tname: '智能评分',\n\t\t\t\t\t\tavatar: selectedAI ? selectedAI.avatar : 'https://u3w.com/chatfile/%E8%B1%86%E5%8C%85.png',\n\t\t\t\t\tcapabilities: [],\n\t\t\t\t\tselectedCapabilities: [],\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tstatus: 'running',\n\t\t\t\t\tprogressLogs: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontent: '智能评分任务已提交，正在评分...',\n\t\t\t\t\t\t\ttimestamp: new Date(),\n\t\t\t\t\t\t\tisCompleted: false,\n\t\t\t\t\t\t\ttype: '智能评分'\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tisExpanded: true\n\t\t\t\t};\n\n\t\t\t\t// 添加或更新智能评分任务\n\t\t\t\tthis.addOrUpdateTaskAI(wkpfAI, '智能评分');\n\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '评分请求已发送，请等待结果',\n\t\t\t\t\ticon: 'success'\n\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('智能评分失败:', error);\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '评分请求失败',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\t\n\t\t\t// 选择评分AI\n\t\t\tselectScoreAI(ai) {\n\t\t\t\tthis.scoreAI = ai;\n\t\t\t\tconsole.log('选择评分AI:', ai);\n\t\t\t},\n\n\t\t\t// 创建新对话\n\t\t\tcreateNewChat() {\n\t\t\t\t// 重置所有数据\n\t\t\t\tthis.chatId = this.generateUUID();\n\t\t\t\tthis.promptInput = '';\n\t\t\t\tthis.taskStarted = false;\n\t\t\t\tthis.screenshots = [];\n\t\t\t\tthis.results = [];\n\t\t\t\tthis.enabledAIs = [];\n\t\t\t\tthis.userInfoReq = {\n\t\t\t\t\tuserPrompt: '',\n\t\t\t\t\tuserId: this.userId,\n\t\t\t\t\tcorpId: this.corpId,\n\t\t\t\t\ttaskId: '',\n\t\t\t\t\troles: '',\n\t\t\t\t\ttoneChatId: '',\n\t\t\t\t\tybDsChatId: '',\n\t\t\t\t\tdbChatId: '',\n          tyChatId: '',\n\n          metasoChatId: '',\n\n          baiduChatId:'',\n          zhzdChatId: '',\n\t\t\t\t\tisNewChat: true\n\t\t\t\t};\n\t\t\t\t// 重置AI列表为初始状态\n\t\t\t\tthis.aiList = [{\n            name: 'DeepSeek',\n            avatar: 'https://u3w.com/chatfile/Deepseek.png',\n            capabilities: [{\n              label: '深度思考',\n              value: 'deep_thinking'\n            },\n              {\n                label: '联网搜索',\n                value: 'web_search'\n              }\n            ],\n            selectedCapabilities: ['deep_thinking', 'web_search'],\n            enabled: true,\n            status: 'idle',\n            progressLogs: [],\n            isExpanded: true,\n          isSingleSelect: false,  // 添加单选标记\n          },\n\t\t\t\t\t{\n\t\t\t\t\t\tname: '豆包',\n\t\t\t\t\t\tavatar: 'https://u3w.com/chatfile/%E8%B1%86%E5%8C%85.png',\n\t\t\t\t\t\tcapabilities: [{\n\t\t\t\t\t\t\tlabel: '深度思考',\n\t\t\t\t\t\t\tvalue: 'deep_thinking'\n\t\t\t\t\t\t}],\n\t\t\t\t\t\tselectedCapabilities: ['deep_thinking'],\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tstatus: 'idle',\n\t\t\t\t\t\tprogressLogs: [],\n\t\t\t\t\t\tisExpanded: true,\n            isSingleSelect: false,  // 添加单选标记\n\t\t\t\t\t},\n          {\n            name: '通义千问',\n            avatar: 'https://u3w.com/chatfile/TongYi.png',\n            capabilities: [\n              {\n                label: '深度思考',\n                value: 'deep_thinking'\n              },\n              {\n                label: '联网搜索',\n                value: 'web_search'\n              }\n            ],\n            selectedCapability: '',\n            enabled: true,\n            status: 'idle',\n            progressLogs: [],\n            isExpanded: true\n          },\n\n          {\n            name: '秘塔',\n            avatar: 'https://www.aitool6.com/wp-content/uploads/2023/06/9557d1-2.jpg',\n            capabilities: [\n              {label: '极速', value: 'fast'},\n              {label: '极速思考', value: 'fast_thinking'},\n              {label: '长思考', value: 'long_thinking'},\n            ],\n            selectedCapabilities: \"fast\",\n            enabled: true,\n            status: 'idle',\n            progressLogs: [],\n            isExpanded: true,\n            isSingleSelect: true,  // 添加单选标记\n          },\n\n          {\n            name: \"知乎直答\",\n            avatar: 'https://u3w.com/chatfile/ZHZD.png',\n            capabilities: [\n              {\n                label: \"智能思考\",\n                value: \"smart_thinking\"\n              },\n              {\n                label: \"深度思考\",\n                value: \"deep_thinking\"\n              },\n              {\n                label: \"快速回答\",\n                value: \"fast_answer\"\n              },\n            ],\n            selectedCapability: \"smart_thinking\", // 改为单选，默认智能思考\n            enabled: true,\n            status: 'idle',\n            progressLogs: [],\n            isExpanded: true,\n            isSingleSelect: true, // 设为单选模式\n          },\n          {\n            name: \"百度AI\",\n            avatar: 'https://u3w.com/chatfile/baiduAI.png',\n            capabilities: [\n              { label: \"深度搜索\", value: \"web_search\" }\n            ],\n            selectedCapabilities: [],\n            enabled: true,\n            status: \"idle\",\n            progressLogs: [],\n            isExpanded: true,\n          },\n\n\t\t\t\t\t{\n\t\t\t\t\t\tname: '腾讯元宝',\n\t\t\t\t\t\tavatar: 'https://u3w.com/chatfile/yuanbao.png',\n\t\t\t\t\t\tcapabilities: [{\n\t\t\t\t\t\t\t\tlabel: '深度思考',\n\t\t\t\t\t\t\t\tvalue: 'deep_thinking'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: '联网搜索',\n\t\t\t\t\t\t\t\tvalue: 'web_search'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\tselectedCapabilities: ['deep_thinking', 'web_search'],\n\t\t\t\t\t\tselectedModel: 'hunyuan', // 默认选择混元\n\t\t\t\t\t\tmodels: [\n\t\t\t\t\t\t\t{ label: '混元', value: 'hunyuan' },\n\t\t\t\t\t\t\t{ label: 'DeepSeek', value: 'deepseek' }\n\t\t\t\t\t\t],\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tstatus: 'idle',\n\t\t\t\t\t\tprogressLogs: [],\n\t\t\t\t\t\tisExpanded: true,\n\t\t\t\t\t\tisSingleSelect: false\n\t\t\t\t\t},\n\n\t\t\t\t];\n\t\t\t\t// 不再根据AI登录状态更新AI启用状态，保持原有选择\n\n\t\t\t\t// 展开相关区域\n\t\t\t\tthis.sectionExpanded.aiConfig = true;\n\t\t\t\tthis.sectionExpanded.promptInput = true;\n\t\t\t\tthis.sectionExpanded.taskStatus = true;\n\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '已创建新对话',\n\t\t\t\t\ticon: 'success'\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t// AI状态相关方法\n\t\t\tcheckAiLoginStatus() {\n\t\t\t\t// 延迟检查，确保WebSocket连接已建立\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.sendAiStatusCheck();\n\t\t\t\t\t// 不再更新AI启用状态，保持原有选择\n\t\t\t\t}, 2000);\n\t\t\t},\n\n\t\t\tsendAiStatusCheck() {\n\t\t\t\t// 检查腾讯元宝登录状态\n\t\t\t\tthis.sendWebSocketMessage({\n\t\t\t\t\ttype: 'PLAY_CHECK_YB_LOGIN',\n\t\t\t\t\tuserId: this.userId,\n\t\t\t\t\tcorpId: this.corpId\n\t\t\t\t});\n\n\t\t\t\t// 检查豆包登录状态\n\t\t\t\tthis.sendWebSocketMessage({\n\t\t\t\t\ttype: 'PLAY_CHECK_DB_LOGIN',\n\t\t\t\t\tuserId: this.userId,\n\t\t\t\t\tcorpId: this.corpId\n\t\t\t\t});\n\n        // 检查DeepSeek登录状态\n        this.sendWebSocketMessage({\n          type: 'PLAY_CHECK_DEEPSEEK_LOGIN',\n          userId: this.userId,\n          corpId: this.corpId\n        });\n\n        // 检查通义千问登录状态\n        this.sendWebSocketMessage({\n          type: 'PLAY_CHECK_QW_LOGIN',\n          userId: this.userId,\n          corpId: this.corpId\n        });\n\n\n\n        // 检查秘塔登录状态\n        this.sendWebSocketMessage({\n          type: \"PLAY_CHECK_METASO_LOGIN\",\n          userId: this.userId,\n          corpId: this.corpId,\n        });\n\n\n\n        // 检查百度AI登录状态\n        this.sendWebSocketMessage({\n          type: 'PLAY_CHECK_BAIDU_LOGIN',\n          userId: this.userId,\n          corpId: this.corpId\n        });\n\n        // 检查知乎直答登录状态\n        console.log('发送知乎直答登录检验请求:', {\n          type: 'PLAY_CHECK_ZHZD_LOGIN',\n          userId: this.userId,\n          corpId: this.corpId\n        });\n        this.sendWebSocketMessage({\n          type: 'PLAY_CHECK_ZHZD_LOGIN',\n          userId: this.userId,\n          corpId: this.corpId\n        });\n\n\t\t\t},\n\n\t\t\tgetPlatformIcon(type) {\n\t\t\t\tconst icons = {\n\t\t\t\t\tyuanbao: 'https://u3w.com/chatfile/yuanbao.png',\n\t\t\t\t\tdoubao: 'https://u3w.com/chatfile/%E8%B1%86%E5%8C%85.png',\n\t\t\t\t\tagent: 'https://u3w.com/chatfile/yuanbao.png',\n          tongyi: 'https://u3w.com/chatfile/TongYi.png'\n\t\t\t\t};\n\t\t\t\treturn icons[type] || '';\n\t\t\t},\n\n\t\t\tgetPlatformName(type) {\n\t\t\t\tconst names = {\n\t\t\t\t\tyuanbao: '腾讯元宝',\n\t\t\t\t\tdoubao: '豆包',\n\t\t\t\t\tagent: '智能体',\n          // tongyi: '通义千问',\n\t\t\t\t};\n\t\t\t\treturn names[type] || '';\n\t\t\t},\n\n\n\n\n\n\t\t\tasync refreshAiStatus() {\n\t\t\t\t// 防止重复刷新\n\t\t\t\tif (this.isRefreshing) {\n\t\t\t\t\tconsole.log('正在刷新中，跳过重复操作');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.isRefreshing = true;\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\t// 首先确保企业ID最新\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result = await ensureLatestCorpId();\n\t\t\t\t\t\tconsole.log('刷新按钮：主机ID已更新为最新值:', result.corpId);\n\t\t\t\t\t\tif (result.corpId !== this.corpId) {\n\t\t\t\t\t\t\tconsole.log('检测到主机ID变更，从', this.corpId, '更新为', result.corpId);\n\t\t\t\t\t\t\tthis.corpId = result.corpId;\n\t\t\t\t\t\t\tthis.userInfoReq.corpId = result.corpId;\n\t\t\t\t\t\t\t// 更新本地存储，确保一致性\n\t\t\t\t\t\t\tstorage.set(constant.corpId, result.corpId);\n\t\t\t\t\t\t\tconsole.log('本地主机ID存储已同步:', result.corpId);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log('主机ID无变化，当前值:', this.corpId);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('确保企业ID最新失败:', error);\n\t\t\t\t\t}\n\n\t\t\t\t// 重置所有AI状态为加载中\n\t\t\t\tthis.isLoading = {\n\t\t\t\t\tyuanbao: true,\n\t\t\t\t\tdoubao: true,\n          deepseek: true,\n          tongyi: true,\n          metaso: true,\n\n          baidu: true,\n          zhzd: true,\n\t\t\t\t};\n\n\t\t\t\t// 重置登录状态\n\t\t\t\tthis.aiLoginStatus = {\n\t\t\t\t\tyuanbao: false,\n\t\t\t\t\tdoubao: false,\n          deepseek: false,\n          tongyi: false,\n          metaso: false,\n          baidu: false,\n          zhzd: false,\n\t\t\t\t};\n\n\t\t\t\t// 重置账户信息\n\t\t\t\tthis.accounts = {\n\t\t\t\t\tyuanbao: '',\n\t\t\t\t\tdoubao: '',\n          deepseek: '',\n          tongyi: '',\n\t\t      metaso: '',\n          baidu: '',\n          zhzd: '',\n\t\t\t\t};\n\n\t\t\t\t// 显示刷新提示\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '正在刷新连接状态...',\n\t\t\t\t\ticon: 'loading',\n\t\t\t\t\tduration: 1500\n\t\t\t\t});\n\n\t\t\t\t// 重新建立WebSocket连接，使用最新的主机ID\n\t\t\t\tconsole.log('准备重新建立WebSocket连接，使用主机ID:', this.corpId);\n\t\t\t\tthis.closeWebSocket();\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconsole.log('开始初始化WebSocket，主机ID:', this.corpId);\n\t\t\t\t\tthis.initWebSocket();\n\t\t\t\t\t// 延迟检查AI状态，确保WebSocket重新连接\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tconsole.log('发送AI状态检查，主机ID:', this.corpId);\n\t\t\t\t\t\tthis.sendAiStatusCheck();\n\t\t\t\t\t\t// 重置刷新标志\n\t\t\t\t\t\tthis.isRefreshing = false;\n\t\t\t\t\t}, 2000);\n\t\t\t\t}, 500);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('刷新AI状态时发生错误:', error);\n\t\t\t\t\tthis.isRefreshing = false;\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '刷新失败，请重试',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// 判断AI是否已登录可用\n\t\t\tisAiLoginEnabled(ai) {\n\t\t\t\tswitch (ai.name) {\n\t\t\t\t\tcase '腾讯元宝':\n\t\t\t\t\t\treturn this.aiLoginStatus.yuanbao; // 腾讯元宝登录状态\n\t\t\t\t\tcase '豆包':\n\t\t\t\t\t\treturn this.aiLoginStatus.doubao; // 豆包登录状态\n          case 'DeepSeek':\n            return this.aiLoginStatus.deepseek; // 使用实际的DeepSeek登录状态\n          case '通义千问':\n            return this.aiLoginStatus.tongyi;   // 通义登录状态\n          case \"秘塔\":\n            return this.aiLoginStatus.metaso; // 秘塔登录状态\n          case \"知乎直答\":\n            return this.aiLoginStatus.zhzd; // 知乎直答登录状态\n          case \"百度AI\":\n            return this.aiLoginStatus.baidu; // 百度AI登录状态\n\n          default:\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// 判断AI是否在加载状态\n\t\t\tisAiInLoading(ai) {\n\t\t\t\tswitch (ai.name) {\n\t\t\t\t\tcase '腾讯元宝':\n\t\t\t\t\t\treturn this.isLoading.yuanbao;\n\t\t\t\t\tcase '豆包':\n\t\t\t\t\t\treturn this.isLoading.doubao;\n          case 'DeepSeek':\n            return this.isLoading.deepseek; // 使用实际的DeepSeek加载状态\n          case '通义千问':\n            return this.isLoading.tongyi;\n          case \"秘塔\":\n            return this.isLoading.metaso;\n          case \"知乎直答\":\n            return this.isLoading.zhzd;\n          case \"百度AI\":\n            return this.isLoading.baidu;\n\n          default:\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// 根据登录状态禁用相关AI（已废弃，不再修改enabled状态）\n\t\t\tdisableAIsByLoginStatus(loginType) {\n\t\t\t\t// 不再修改enabled状态，只通过UI控制操作权限\n\t\t\t\tconsole.log(`AI ${loginType} 登录状态已更新，但保持原有选择`);\n\t\t\t},\n\n\t\t\t// 根据当前AI登录状态更新AI启用状态（已废弃，不再修改enabled状态）\n\t\t\tupdateAiEnabledStatus() {\n\t\t\t\t// 不再修改enabled状态，只通过UI控制操作权限\n\t\t\t\tconsole.log('AI登录状态已更新，但保持原有选择');\n\t\t\t},\n\n\t\t\t// 微头条相关方法\n\t\t\t// 微头条文章编辑相关方法\n\t\t\tshowTthArticleEditModal() {\n\t\t\t\tthis.tthArticleEditVisible = true;\n\t\t\t},\n\n\t\t\tcloseTthArticleEditModal() {\n\t\t\t\tthis.tthArticleEditVisible = false;\n\t\t\t},\n\n\t\t\tconfirmTTHPublish() {\n\t\t\t\tif (!this.tthArticleTitle || !this.tthArticleContent) {\n\t\t\t\t\tuni.showToast({ title: '请填写标题和内容', icon: 'none' });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst publishRequest = {\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tid: this.generateUUID(),\n\t\t\t\t\tmethod: '微头条发布',\n\t\t\t\t\tparams: {\n\t\t\t\t\t\ttaskId: this.generateUUID(),\n\t\t\t\t\t\tuserId: this.userId,\n\t\t\t\t\t\tcorpId: this.corpId,\n\t\t\t\t\t\troles: '',\n\t\t\t\t\t\ttitle: this.tthArticleTitle,\n\t\t\t\t\t\tcontent: this.tthArticleContent,\n\t\t\t\t\t\ttype: '微头条发布'\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthis.message(publishRequest);\n\t\t\t\tthis.tthArticleEditVisible = false;\n\t\t\t\tthis.tthFlowVisible = true;\n\t\t\t\tthis.tthFlowLogs = [];\n\t\t\t\tthis.tthFlowImages = [];\n\t\t\t\tuni.showToast({ title: '微头条发布请求已发送！', icon: 'success' });\n\t\t\t},\n\n\n\n\t\t\t// 微头条发布流程相关方法\n\t\t\tcloseTthFlowDialog() {\n\t\t\t\tthis.tthFlowVisible = false;\n\t\t\t\tthis.tthFlowLogs = [];\n\t\t\t\tthis.tthFlowImages = [];\n\t\t\t},\n\n\t\t\t// HTML转纯文本方法\n\t\t\thtmlToText(html) {\n\t\t\t\tif (!html) return '';\n\t\t\t\treturn html.replace(/<[^>]*>/g, '');\n\t\t\t},\n\n\t\t\t// 格式化时间\n\t\t\tformatTime(timestamp) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!timestamp) {\n\t\t\t\t\t\treturn '时间未知';\n\t\t\t\t\t}\n\n\t\t\t\t\tlet date;\n\n\t\t\t\t\tif (typeof timestamp === 'number') {\n\t\t\t\t\t\tdate = new Date(timestamp);\n\t\t\t\t\t} else if (typeof timestamp === 'string') {\n\t\t\t\t\t\t// 处理ISO 8601格式：2025-06-25T07:18:54.110Z\n\t\t\t\t\t\tif (timestamp.includes('T') && (timestamp.includes('Z') || timestamp.includes('+'))) {\n\t\t\t\t\t\t\tdate = new Date(timestamp);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 处理 \"2025-6-23 14:53:12\" 这种格式\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tconst match = timestamp.match(/(\\d{4})-(\\d{1,2})-(\\d{1,2})\\s+(\\d{1,2}):(\\d{1,2}):(\\d{1,2})/);\n\t\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\t\tconst [, year, month, day, hour, minute, second] = match;\n\t\t\t\t\t\t\t\tdate = new Date(\n\t\t\t\t\t\t\t\t\tparseInt(year),\n\t\t\t\t\t\t\t\t\tparseInt(month) - 1,\n\t\t\t\t\t\t\t\t\tparseInt(day),\n\t\t\t\t\t\t\t\t\tparseInt(hour),\n\t\t\t\t\t\t\t\t\tparseInt(minute),\n\t\t\t\t\t\t\t\t\tparseInt(second)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// 如果正则不匹配，尝试其他方式\n\t\t\t\t\t\t\t\tconst fixedTimestamp = timestamp.replace(/\\s/g, 'T');\n\t\t\t\t\t\t\t\tdate = new Date(fixedTimestamp);\n\n\t\t\t\t\t\t\t\tif (isNaN(date.getTime())) {\n\t\t\t\t\t\t\t\t\tdate = new Date(timestamp);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (timestamp instanceof Date) {\n\t\t\t\t\t\tdate = timestamp;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdate = new Date(timestamp);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isNaN(date.getTime())) {\n\t\t\t\t\t\treturn '时间未知';\n\t\t\t\t\t}\n\n\t\t\t\t\t// 使用更简洁的时间格式，避免显示时区信息\n\t\t\t\t\tconst hour = date.getHours().toString().padStart(2, '0');\n\t\t\t\t\tconst minute = date.getMinutes().toString().padStart(2, '0');\n\t\t\t\t\tconst second = date.getSeconds().toString().padStart(2, '0');\n\n\t\t\t\t\tconst timeString = `${hour}:${minute}:${second}`;\n\n\t\t\t\t\treturn timeString;\n\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('格式化时间错误:', error, timestamp);\n\t\t\t\t\treturn '时间未知';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n</script>\n\n<style scoped>\n\t.console-container {\n\t\theight: 100vh;\n\t\tbackground-color: #f5f7fa;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n\t/* 顶部固定区域 */\n\t.header-fixed {\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tz-index: 1000;\n\t\tbackground-color: #fff;\n\t\tborder-bottom: 1px solid #ebeef5;\n\t}\n\n\t.header-content {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tpadding: 10px 15px;\n\t\t/* padding-top 通过内联样式动态设置 */\n\t}\n\n\t.header-title {\n\t\tfont-size: 18px;\n\t\tfont-weight: 600;\n\t\tcolor: #303133;\n\t}\n\n\t.header-actions {\n\t\tdisplay: flex;\n\t\tgap: 10px;\n\t}\n\n\t.action-btn {\n\t\twidth: 36px;\n\t\theight: 36px;\n\t\tborder-radius: 18px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\ttransition: all 0.3s ease;\n\t\tposition: relative;\n\t\toverflow: hidden;\n\t}\n\n\t.action-btn:active {\n\t\ttransform: scale(0.92);\n\t\topacity: 0.7;\n\t}\n  .connection-indicator {\n    position: absolute;\n    top: -2px;\n    right: -2px;\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    border: 1px solid #fff;\n    z-index: 1;\n  }\n\n  .connection-indicator.connected {\n    background-color: #52c41a;\n    box-shadow: 0 0 4px rgba(82, 196, 26, 0.6);\n  }\n\n  .connection-indicator.disconnected {\n    background-color: #ff4d4f;\n    box-shadow: 0 0 4px rgba(255, 77, 79, 0.6);\n  }\n\n\t.action-icon {\n\t\tfont-size: 18px;\n\t\tcolor: #ffffff;\n\t\tfont-weight: 500;\n\t\ttext-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tz-index: 1;\n\t\tposition: relative;\n\t}\n\n\t.action-icon-img {\n\t\twidth: 20px;\n\t\theight: 20px;\n\t\tz-index: 1;\n\t\tposition: relative;\n\t}\n\n\t/* 创建新会话图标更大 */\n\t.new-chat-btn .action-icon-img {\n\t\twidth: 24px;\n\t\theight: 24px;\n\t}\n\n\t/* 移除渐变背景，使用原生图标 */\n\t.refresh-btn,\n\t.history-btn,\n\t.new-chat-btn {\n\t\tbackground: transparent;\n\t\tbox-shadow: none;\n\t}\n\n\n\n\t/* 主体滚动区域 */\n\t.main-scroll {\n\t\tflex: 1;\n\t\t/* height 和 padding-top 通过内联样式动态设置 */\n\t\tpadding-bottom: 20px;\n\t\tbox-sizing: border-box;\n\t}\n\n\t/* 区块样式 */\n\t.section-block {\n\t\tmargin: 10px 15px;\n\t\tbackground-color: #fff;\n\t\tborder-radius: 8px;\n\t\toverflow: hidden;\n\t\tbox-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n\t}\n\n\t.section-header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tpadding: 15px;\n\t\tborder-bottom: 1px solid #ebeef5;\n\t\tbackground-color: #fafafa;\n\t}\n\n\t.section-title {\n\t\tfont-size: 16px;\n\t\tfont-weight: 600;\n\t\tcolor: #303133;\n\t}\n\n\t.section-arrow {\n\t\tfont-size: 14px;\n\t\tcolor: #909399;\n\t\ttransition: transform 0.3s;\n\t}\n\n\t.task-arrow {\n\t\tfont-size: 12px;\n\t\tcolor: #909399;\n\t\ttransition: transform 0.3s;\n\t\tmargin-right: 8px;\n\t}\n\n\t.close-icon {\n\t\tfont-size: 18px;\n\t\tcolor: #909399;\n\t\tcursor: pointer;\n\t}\n\n\t.section-content {\n\t\tpadding: 15px;\n\t}\n\n\t/* AI配置区域 */\n\t.ai-grid {\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n\t\tgap: 10px;\n\t}\n\n\t.ai-card {\n\t\twidth: calc(50% - 5px);\n\t\tborder: 1px solid #ebeef5;\n\t\tborder-radius: 8px;\n\t\tpadding: 10px;\n\t\ttransition: all 0.3s;\n\t\tmin-height: 65px;\n\t\tbox-sizing: border-box;\n\t}\n\n\t.ai-card.ai-enabled {\n\t\tborder-color: #409EFF;\n\t\tbackground-color: #f0f8ff;\n\t}\n\n\t.ai-card.ai-disabled {\n\t\tbackground-color: #fafafa;\n\t\tborder-color: #e4e7ed;\n\t\tborder-style: dashed;\n\t\tpointer-events: none;\n\t}\n\n\t.ai-avatar.avatar-disabled {\n\t\topacity: 0.7;\n\t\tfilter: grayscale(30%);\n\t}\n\n\t.ai-name.name-disabled {\n\t\tcolor: #373839;\n\t}\n\n\t.login-required {\n\t\tfont-size: 9px;\n\t\tcolor: red;\n\t\tmargin-top: 2px;\n\t\tline-height: 1;\n\t}\n\n\t.loading-text {\n\t\tfont-size: 9px;\n\t\tcolor: #409EFF;\n\t\tmargin-top: 2px;\n\t\tline-height: 1;\n\t}\n\n\t.capability-tag.capability-disabled {\n\t\topacity: 0.5;\n\t\tbackground-color: #f5f5f5;\n\t\tborder-color: #e4e7ed;\n\t\tpointer-events: none;\n\t}\n\n\t.capability-tag.capability-disabled .capability-text {\n\t\tcolor: #c0c4cc;\n\t}\n\n\t.ai-header {\n\t\tdisplay: flex;\n\t\talign-items: flex-start;\n\t\tmargin-bottom: 8px;\n\t\tmin-height: 24px;\n\t}\n\n\t.ai-avatar {\n\t\twidth: 24px;\n\t\theight: 24px;\n\t\tborder-radius: 12px;\n\t\tmargin-right: 8px;\n\t}\n\n\t.ai-info {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t}\n\n\t.ai-name-container {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: flex-start;\n\t\tmin-width: 0;\n\t}\n\n\t.ai-name {\n\t\tfont-size: 12px;\n\t\tfont-weight: 500;\n\t\tcolor: #303133;\n\t\twhite-space: nowrap;\n\t\toverflow: hidden;\n\t\ttext-overflow: ellipsis;\n\t\tmax-width: 100%;\n\t}\n\n\t.ai-capabilities {\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n\t\tgap: 4px;\n\t}\n\n\t.capability-tag {\n\t\tpadding: 2px 6px;\n\t\tborder-radius: 10px;\n\t\tborder: 1px solid #dcdfe6;\n\t\tbackground-color: #fff;\n\t\ttransition: all 0.3s;\n\t}\n\n\t.capability-tag.capability-active {\n\t\tbackground-color: #409EFF;\n\t\tborder-color: #409EFF;\n\t}\n\n\t.capability-text {\n\t\tfont-size: 10px;\n\t\tcolor: #606266;\n\t}\n\n\t.capability-tag.capability-active .capability-text {\n\t\tcolor: #fff;\n\t}\n\n\t/* 提示词输入区域 */\n\t.prompt-textarea {\n\t\twidth: 100%;\n\t\tmin-height: 80px;\n\t\tpadding: 10px;\n\t\tborder: 1px solid #dcdfe6;\n\t\tborder-radius: 4px;\n\t\tfont-size: 14px;\n\t\tline-height: 1.5;\n\t\tresize: none;\n\t\tbox-sizing: border-box;\n\t}\n\n\t.prompt-footer {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tmargin-top: 10px;\n\t}\n\n\t.word-count {\n\t\tfont-size: 12px;\n\t\tcolor: #909399;\n\t}\n\n\t.send-btn {\n\t\tbackground-color: #409EFF;\n\t\tcolor: #fff;\n\t\tborder: none;\n\t\tborder-radius: 20px;\n\t\tpadding: 6px 0;\n\t\tfont-size: 14px;\n\t\twidth: 50%;\n\t\theight: 30px;\n\t\tdisplay: flex;\n\t\tmargin-left: 50%;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\n\t.send-btn-disabled {\n\t\tbackground-color: #c0c4cc;\n\t}\n\n\t/* 任务执行状态 */\n\t.task-flow {\n\t\tmargin-bottom: 15px;\n\t}\n\n\t.task-item {\n\t\tborder: 1px solid #ebeef5;\n\t\tborder-radius: 8px;\n\t\tmargin-bottom: 10px;\n\t\toverflow: hidden;\n\t}\n\n\t.task-header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tpadding: 12px;\n\t\tbackground-color: #fafafa;\n\t\tborder-bottom: 1px solid #ebeef5;\n\t}\n\n\t.task-left {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 8px;\n\t}\n\n\t.task-avatar {\n\t\twidth: 20px;\n\t\theight: 20px;\n\t\tborder-radius: 10px;\n\t}\n\n\t.task-name {\n\t\tfont-size: 14px;\n\t\tfont-weight: 500;\n\t\tcolor: #303133;\n\t}\n\n\t.task-right {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 5px;\n\t}\n\n\t.status-text {\n\t\tfont-size: 12px;\n\t\tcolor: #606266;\n\t}\n\n\t.status-icon {\n\t\tfont-size: 14px;\n\t}\n\n\t.status-completed {\n\t\tcolor: #67c23a;\n\t}\n\n\t.status-failed {\n\t\tcolor: #f56c6c;\n\t}\n\n\t.status-running {\n\t\tcolor: #409EFF;\n\t\tanimation: rotate 1s linear infinite;\n\t}\n\n\t.status-idle {\n\t\tcolor: #909399;\n\t}\n\n\t@keyframes rotate {\n\t\tfrom {\n\t\t\ttransform: rotate(0deg);\n\t\t}\n\n\t\tto {\n\t\t\ttransform: rotate(360deg);\n\t\t}\n\t}\n\n\t/* 进度日志 */\n\t.progress-logs {\n\t\tpadding: 10px 15px;\n\t\tmax-height: 150px;\n\t\toverflow-y: auto;\n\t}\n\n\t.progress-item {\n\t\tdisplay: flex;\n\t\talign-items: flex-start;\n\t\tmargin-bottom: 8px;\n\t\tposition: relative;\n\t}\n\n\t.progress-item:last-child {\n\t\tmargin-bottom: 0;\n\t}\n\n\t.progress-dot {\n\t\twidth: 8px;\n\t\theight: 8px;\n\t\tborder-radius: 4px;\n\t\tbackground-color: #dcdfe6;\n\t\tmargin-right: 10px;\n\t\tmargin-top: 6px;\n\t\tflex-shrink: 0;\n\t}\n\n\t.progress-dot.dot-completed {\n\t\tbackground-color: #67c23a;\n\t}\n\n\t.progress-content {\n\t\tflex: 1;\n\t\tmin-width: 0;\n\t}\n\n\t.progress-time {\n\t\tfont-size: 10px;\n\t\tcolor: #909399;\n\t\tmargin-bottom: 2px;\n\t}\n\n\t.progress-text {\n\t\tfont-size: 12px;\n\t\tcolor: #606266;\n\t\tline-height: 1.4;\n\t\tword-break: break-all;\n\t}\n\n\t/* 主机可视化 */\n\t.screenshots-section {\n\t\tmargin-top: 15px;\n\t}\n\n\t.screenshots-header {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tmargin-bottom: 10px;\n\t\tgap: 10px;\n\t}\n\n\t.section-subtitle {\n\t\tfont-size: 14px;\n\t\tfont-weight: 500;\n\t\tcolor: #303133;\n\t}\n\n\t.auto-play-text {\n\t\tfont-size: 12px;\n\t\tcolor: #606266;\n\t}\n\n\t.screenshots-swiper {\n\t\theight: 200px;\n\t\tborder-radius: 8px;\n\t\toverflow: hidden;\n\t}\n\n\t.screenshot-image {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n\n\t/* 结果展示区域 - 简洁标签页风格 */\n\n\t.result-tabs {\n\t\twhite-space: nowrap;\n\t\tmargin-bottom: 20px;\n\t\tborder-bottom: 1px solid #ebeef5;\n\t}\n\n\t.tab-container {\n\t\tdisplay: flex;\n\t\tgap: 0;\n\t\tpadding: 0 15px;\n\t}\n\n\t.result-tab {\n\t\tflex-shrink: 0;\n\t\tpadding: 12px 20px;\n\t\tposition: relative;\n\t\ttransition: all 0.3s ease;\n\t\tbackground: transparent;\n\t\tborder: none;\n\t}\n\n\t.result-tab::after {\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\tbottom: 0;\n\t\tleft: 50%;\n\t\twidth: 0;\n\t\theight: 2px;\n\t\tbackground: #409EFF;\n\t\ttransition: all 0.3s ease;\n\t\ttransform: translateX(-50%);\n\t}\n\n\t.result-tab.tab-active::after {\n\t\twidth: 80%;\n\t}\n\n\t.tab-text {\n\t\tfont-size: 14px;\n\t\tcolor: #909399;\n\t\tfont-weight: 400;\n\t\ttransition: all 0.3s ease;\n\t\twhite-space: nowrap;\n\t}\n\n\t.result-tab.tab-active .tab-text {\n\t\tcolor: #409EFF;\n\t\tfont-weight: 500;\n\t}\n\n\t.result-tab:active {\n\t\ttransform: translateY(1px);\n\t}\n\n\t.result-content {\n\t\tmargin-top: 10px;\n\t}\n\n\t.result-header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tmargin-bottom: 10px;\n\t\tpadding-bottom: 8px;\n\t\tborder-bottom: 1px solid #ebeef5;\n\t}\n\n\t.result-title {\n\t\tfont-size: 14px;\n\t\tfont-weight: 500;\n\t\tcolor: #303133;\n\t}\n\n\n\n\t.result-body {\n\t\tmargin-bottom: 15px;\n\t}\n\n\t.result-image-container {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t}\n\n\t.result-image {\n\t\tmax-width: 100%;\n\t\tborder-radius: 8px;\n\t}\n\n\t/* PDF文件容器样式 */\n\t.result-pdf-container {\n\t\tbackground-color: #f9f9f9;\n\t\tborder-radius: 8px;\n\t\tborder: 2px dashed #dcdfe6;\n\t\toverflow: hidden;\n\t}\n\n\t.pdf-placeholder {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tpadding: 20px;\n\t}\n\n\t.pdf-icon {\n\t\tfont-size: 48px;\n\t\tmargin-bottom: 10px;\n\t}\n\n\t.pdf-text {\n\t\tfont-size: 14px;\n\t\tcolor: #606266;\n\t\tmargin-bottom: 15px;\n\t}\n\n\t.pdf-actions {\n\t\tdisplay: flex;\n\t\tgap: 10px;\n\t\tjustify-content: center;\n\t}\n\n\t.pdf-btn {\n\t\tborder-radius: 4px;\n\t\tpadding: 8px 16px;\n\t\tfont-size: 12px;\n\t\theight: auto;\n\t\tline-height: 1.2;\n\t\tflex: 1;\n\t\tmax-width: 100px;\n\t}\n\n\t.download-btn {\n\t\tbackground-color: #f6ffed;\n\t\tcolor: #52c41a;\n\t\tborder: 1px solid #b7eb8f;\n\t}\n\n\t.copy-btn {\n\t\tbackground-color: #fff7e6;\n\t\tcolor: #fa8c16;\n\t\tborder: 1px solid #ffd591;\n\t}\n\n\t.result-text {\n\t\tpadding: 10px;\n\t\tbackground-color: #f9f9f9;\n\t\tborder-radius: 8px;\n\t\tfont-size: 14px;\n\t\tline-height: 1.6;\n\t\tmax-height: 300px;\n\t\toverflow-y: auto;\n\t}\n\n\t.result-actions {\n\t\tdisplay: flex;\n\t\tjustify-content: flex-end;\n\t\tgap: 8px;\n\t\tflex-wrap: wrap;\n\t\tmargin-bottom: 15px;\n\t}\n\n\t.action-btn-small, .share-link-btn, .collect-btn {\n\t\tborder: 1px solid #dcdfe6;\n\t\tborder-radius: 12px;\n\t\tpadding: 4px 12px;\n\t\tfont-size: 12px;\n\t\theight: auto;\n\t\tline-height: 1.2;\n\t\tmin-width: 60px;\n\t\ttext-align: center;\n\t\ttransition: all 0.3s ease;\n\t}\n\n\t.action-btn-small {\n\t\tbackground-color: #f5f7fa;\n\t\tcolor: #606266;\n\t\tborder-color: #dcdfe6;\n\t}\n\n\t.share-link-btn {\n\t\tbackground-color: #67c23a;\n\t\tcolor: #fff;\n\t\tborder-color: #67c23a;\n\t}\n\n\t.collect-btn {\n\t\tbackground-color: #e6a23c;\n\t\tcolor: #fff;\n\t\tborder-color: #e6a23c;\n\t}\n\n\t/* 按钮悬停和点击效果 */\n\t.action-btn-small:active {\n\t\topacity: 0.8;\n\t\ttransform: scale(0.95);\n\t}\n\n\t.share-link-btn:active {\n\t\topacity: 0.8;\n\t\ttransform: scale(0.95);\n\t}\n\n\t.collect-btn:active {\n\t\topacity: 0.8;\n\t\ttransform: scale(0.95);\n\t}\n\n\t/* 智能评分按钮在标题栏 */\n\t.score-btn {\n\t\tbackground-color: #409EFF;\n\t\tcolor: #fff;\n\t\tborder: none;\n\t\tborder-radius: 12px;\n\t\tpadding: 4px 12px;\n\t\tfont-size: 12px;\n\t\theight: auto;\n\t\tline-height: 1.2;\n\t\tmargin-left: 57%;\n\t\tflex-shrink: 0;\n\t}\n\n\t/* 历史记录抽屉 */\n\t.drawer-mask {\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tbackground-color: rgba(0, 0, 0, 0.5);\n\t\tz-index: 999;\n\t\tdisplay: flex;\n\t\tjustify-content: flex-end;\n\t}\n\n\t.drawer-container {\n\t\twidth: 280px;\n\t\theight: 100vh;\n\t\tbackground-color: #fff;\n\t}\n\n\t.drawer-content {\n\t\tmargin-top: 120rpx;\n\t\theight: 100vh;\n\t\tbackground-color: #fff;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tbox-sizing: border-box;\n\t}\n\n\t.drawer-header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tpadding: 15px;\n\t\tborder-bottom: 1px solid #ebeef5;\n\t}\n\n\t.drawer-title {\n\t\tfont-size: 16px;\n\t\tfont-weight: 600;\n\t\tcolor: #303133;\n\t}\n\n\t.history-list {\n\t\tflex: 1;\n\t\tpadding: 10px;\n\t\theight: calc(100vh - 60px);\n\t\tbox-sizing: border-box;\n\t}\n\n\t.history-group {\n\t\tmargin-bottom: 15px;\n\t}\n\n\t.history-date {\n\t\tfont-size: 12px;\n\t\tcolor: #909399;\n\t\tmargin-bottom: 8px;\n\t\tpadding: 5px 0;\n\t\tborder-bottom: 1px solid #f0f0f0;\n\t}\n\n\t.history-item {\n\t\tbackground-color: #f9f9f9;\n\t\tborder-radius: 8px;\n\t\tpadding: 10px;\n\t\tmargin-bottom: 8px;\n\t}\n\n\t.history-prompt {\n\t\tfont-size: 14px;\n\t\tcolor: #303133;\n\t\tline-height: 1.4;\n\t\tmargin-bottom: 5px;\n\t\tdisplay: -webkit-box;\n\t\t-webkit-line-clamp: 2;\n\t\t-webkit-box-orient: vertical;\n\t\toverflow: hidden;\n\t}\n\n\t.history-time {\n\t\tfont-size: 10px;\n\t\tcolor: #909399;\n\t}\n\n\t/* 智能评分弹窗 */\n\t.popup-mask {\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tbackground-color: rgba(0, 0, 0, 0.5);\n\t\tz-index: 999;\n\t\tdisplay: flex;\n\t\talign-items: flex-end;\n\t}\n\n\t.score-modal {\n\t\twidth: 100%;\n\t\tbackground-color: #fff;\n\t\tborder-radius: 20px 20px 0 0;\n\t\tmax-height: 80vh;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n\t.score-header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tpadding: 15px;\n\t\tborder-bottom: 1px solid #ebeef5;\n\t}\n\n\t.score-title {\n\t\tfont-size: 16px;\n\t\tfont-weight: 600;\n\t\tcolor: #303133;\n\t}\n\n\t.score-content {\n\t\tflex: 1;\n\t\tpadding: 15px;\n\t\toverflow-y: auto;\n\t}\n\n\t.score-selection {\n\t\tmargin-bottom: 20px;\n\t}\n\n\t.score-subtitle {\n\t\tfont-size: 14px;\n\t\tfont-weight: 500;\n\t\tcolor: #303133;\n\t\tmargin-bottom: 10px;\n\t}\n\n\t.score-checkboxes {\n\t\tmargin-top: 30rpx;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 8px;\n\t}\n\n\t.checkbox-item {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 8px;\n\t}\n\n\t.checkbox-text {\n\t\tfont-size: 14px;\n\t\tcolor: #606266;\n\t}\n\n\t.score-prompt-section {\n\t\tmargin-bottom: 20px;\n\t}\n\n\t/* 模板选择器样式 */\n\t.template-selector {\n\t\tmargin: 10px 0;\n\t}\n\n\t.picker-display {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tpadding: 10px 12px;\n\t\tbackground-color: #f5f7fa;\n\t\tborder: 1px solid #dcdfe6;\n\t\tborder-radius: 8px;\n\t\tfont-size: 14px;\n\t}\n\n\t.picker-text {\n\t\tcolor: #606266;\n\t\tflex: 1;\n\t}\n\n\t.picker-arrow {\n\t\tcolor: #909399;\n\t\tfont-size: 12px;\n\t\tmargin-left: 8px;\n\t}\n\n\t.score-textarea {\n\t\twidth: 100%;\n\t\tmin-height: 120px;\n\t\tmax-height: 300px;\n\t\tpadding: 10px;\n\t\tborder: 1px solid #dcdfe6;\n\t\tborder-radius: 8px;\n\t\tfont-size: 14px;\n\t\tresize: vertical;\n\t\tbox-sizing: border-box;\n\t\tmargin-top: 10px;\n\t\tword-wrap: break-word;\n\t\toverflow-y: auto;\n\t}\n\n\t/* 微头条文章内容超过2000字时的样式 */\n\t.score-textarea.content-exceeded {\n\t\tborder-color: #f56c6c;\n\t\tbackground-color: #fef0f0;\n\t}\n\n\t/* 字符计数样式 */\n\t.char-count {\n\t\ttext-align: right;\n\t\tfont-size: 12px;\n\t\tcolor: #909399;\n\t\tmargin-top: 5px;\n\t}\n\n\t/* 字符计数超过限制时的样式 */\n\t.char-count-exceeded {\n\t\tcolor: #f56c6c;\n\t\tfont-weight: bold;\n\t}\n\n\t.score-submit-btn {\n\t\twidth: 100%;\n\t\tbackground-color: #409EFF;\n\t\tcolor: #fff;\n\t\tborder: none;\n\t\tborder-radius: 8px;\n\t\tpadding: 12px;\n\t\tfont-size: 16px;\n\t}\n\n\t.score-submit-btn[disabled] {\n\t\tbackground-color: #c0c4cc;\n\t}\n\n\t/* 响应式布局 */\n\t@media (max-width: 375px) {\n\t\t.ai-card {\n\t\t\twidth: 100%;\n\t\t}\n\n\t\t.header-content {\n\t\t\tpadding: 8px 12px;\n\t\t}\n\n\t\t.section-block {\n\t\t\tmargin: 8px 12px;\n\t\t}\n\t}\n\n\t/* 响应式布局 */\n\t@media (max-width: 375px) {\n\t\t.ai-card {\n\t\t\twidth: 100%;\n\t\t}\n\n\t\t.header-content {\n\t\t\tpadding: 8px 12px;\n\t\t}\n\n\t\t.section-block {\n\t\t\tmargin: 8px 12px;\n\t\t}\n\t}\n\n  /* DeepSeek响应内容的特定样式 */\n  .deepseek-format-container {\n    margin: 20px 0;\n    padding: 15px;\n    background-color: #f9f9f9;\n    border-radius: 5px;\n    border: 1px solid #eaeaea;\n  }\n\n  .result-text .deepseek-response {\n    max-width: 100%;\n    margin: 0 auto;\n    background-color: #fff;\n    border-radius: 8px;\n    padding: 10px;\n    font-family: Arial, sans-serif;\n  }\n\n  .result-text .deepseek-response pre {\n    background-color: #f5f5f5;\n    padding: 10px;\n    border-radius: 4px;\n    font-family: monospace;\n    overflow-x: auto;\n    display: block;\n    margin: 10px 0;\n    font-size: 12px;\n  }\n\n  .result-text .deepseek-response code {\n    background-color: #f5f5f5;\n    padding: 2px 4px;\n    border-radius: 3px;\n    font-family: monospace;\n    font-size: 12px;\n  }\n\n  .result-text .deepseek-response table {\n    border-collapse: collapse;\n    width: 100%;\n    margin: 15px 0;\n  }\n\n  .result-text .deepseek-response th,\n  .result-text .deepseek-response td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: left;\n    font-size: 12px;\n  }\n\n  .result-text .deepseek-response th {\n    background-color: #f2f2f2;\n    font-weight: bold;\n  }\n\n  .result-text .deepseek-response h1,\n  .result-text .deepseek-response h2,\n  .result-text .deepseek-response h3,\n  .result-text .deepseek-response h4,\n  .result-text .deepseek-response h5,\n  .result-text .deepseek-response h6 {\n    margin-top: 20px;\n    margin-bottom: 10px;\n    font-weight: bold;\n    color: #222;\n  }\n\n  .result-text .deepseek-response a {\n    color: #0066cc;\n    text-decoration: none;\n  }\n\n  .result-text .deepseek-response blockquote {\n    border-left: 4px solid #ddd;\n    padding-left: 15px;\n    margin: 15px 0;\n    color: #555;\n  }\n\n  .result-text .deepseek-response ul,\n  .result-text .deepseek-response ol {\n    padding-left: 20px;\n    margin: 10px 0;\n  }\n\n  /* 媒体选择样式 */\n  /* AI选择样式 */\n  .ai-selection-section {\n    margin-bottom: 20px;\n  }\n\n  .ai-radio-group {\n    display: flex;\n    gap: 10px;\n    margin: 10px 0;\n  }\n\n  .ai-radio-item {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 15px 10px;\n    border: 1px solid #e0e0e0;\n    border-radius: 8px;\n    background-color: #f9f9f9;\n    transition: all 0.3s ease;\n  }\n\n  .ai-radio-item.active {\n    border-color: #409eff;\n    background-color: #ecf5ff;\n  }\n\n  .ai-icon {\n    font-size: 24px;\n    margin-bottom: 5px;\n  }\n\n  .ai-text {\n    font-size: 14px;\n    color: #333;\n    font-weight: 500;\n  }\n\n  .media-selection-section {\n    margin-bottom: 20px;\n  }\n\n  .media-radio-group {\n    display: flex;\n    gap: 10px;\n    margin: 10px 0;\n  }\n\n  .media-radio-item {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 15px 10px;\n    border: 1px solid #e0e0e0;\n    border-radius: 8px;\n    background-color: #f9f9f9;\n    transition: all 0.3s ease;\n  }\n\n  .media-radio-item.active {\n    border-color: #409eff;\n    background-color: #ecf5ff;\n  }\n\n  .media-icon {\n    font-size: 24px;\n    margin-bottom: 5px;\n  }\n\n  .media-text {\n    font-size: 14px;\n    color: #333;\n    font-weight: 500;\n  }\n\n  .media-description {\n    margin-top: 10px;\n    padding: 8px 12px;\n    background-color: #f0f9ff;\n    border-radius: 4px;\n    border-left: 3px solid #409eff;\n  }\n\n  .description-text {\n    font-size: 12px;\n    color: #666;\n    line-height: 1.4;\n  }\n\n  /* 微头条按钮样式 */\n  .media-radio-item.active {\n    background: linear-gradient(135deg, #ff6b35, #f7931e);\n  }\n\n  /* 腾讯元宝模型选择样式 */\n  .model-selection {\n    margin-top: 12rpx;\n    padding: 8rpx 12rpx;\n    background-color: #f8f9ff;\n    border-radius: 8rpx;\n    border: 1rpx solid #e1e8ff;\n  }\n\n  .model-label {\n    font-size: 12px;\n    color: #666;\n    margin-bottom: 8rpx;\n    display: block;\n  }\n\n  .model-picker {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 8rpx 12rpx;\n    background-color: #fff;\n    border: 1rpx solid #ddd;\n    border-radius: 6rpx;\n    min-height: 32rpx;\n  }\n\n  .model-text {\n    font-size: 14px;\n    color: #333;\n    flex: 1;\n  }\n\n  .picker-arrow {\n    font-size: 12px;\n    color: #999;\n    margin-left: 8rpx;\n  }\n\n  /* 禁用状态样式 */\n  .ai-card.ai-disabled .model-picker {\n    background-color: #f5f5f5;\n    border-color: #e0e0e0;\n  }\n\n  .ai-card.ai-disabled .model-text,\n  .ai-card.ai-disabled .picker-arrow {\n    color: #ccc;\n  }\n</style>\n\n","import mod from \"-!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--6-oneOf-1-2!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=style&index=0&id=51b5538d&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--6-oneOf-1-2!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../../小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./index.vue?vue&type=style&index=0&id=51b5538d&scoped=true&lang=css&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1760000595787\n      var cssReload = require(\"D:/小红帽/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"/\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"sourceRoot":""}